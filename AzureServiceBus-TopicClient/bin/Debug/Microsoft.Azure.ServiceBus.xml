<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.ServiceBus</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Azure.ServiceBus.Amqp.AmqpSubscriptionClient.PrefetchCount">
            <summary>
            Gets or sets the number of messages that the subscription client can simultaneously request.
            </summary>
            <value>The number of messages that the subscription client can simultaneously request.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ClientEntity">
            <summary>
            Contract for all client entities with Open-Close/Abort state m/c
            main-purpose: closeAll related entities
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.IsClosedOrClosing">
            <summary>
            Returns true if the client is closed or closing.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.OwnsConnection">
            <summary>
            Returns true if connection is owned and false if connection is shared.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.Path">
            <summary>
            Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.ClientId">
            <summary>
            Gets the ID to identify this client. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new client has a unique ID (in that process).</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.RetryPolicy">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> defined on the client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.CloseAsync">
            <summary>
            Closes the Client. Closes the connections opened by it.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used with this client.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> to be unregistered</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.GenerateClientId(System.String,System.String)">
            <summary>
            Generates a new client id that can be used to identify a specific client in logs and error messages.
            </summary>
            <param name="postfix">Information that can be appended by the client.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.ThrowIfClosed">
            <summary>
            Throw an OperationCanceledException if the object is Closing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.UpdateClientId(System.String)">
            <summary>
            Updates the client id.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Constants.EpochTime">
            Represents 00:00:00 UTC Thursday 1, January 1970.
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver">
             <summary>
             The MessageReceiver can be used to receive messages from Queues and Subscriptions and acknowledge them.
             </summary>
             <example>
             Create a new MessageReceiver to receive a message from a Subscription
             <code>
             IMessageReceiver messageReceiver = new MessageReceiver(
                 namespaceConnectionString,
                 EntityNameHelper.FormatSubscriptionPath(topicName, subscriptionName),
                 ReceiveMode.PeekLock);
             </code>
            
             Receive a message from the Subscription.
             <code>
             var message = await messageReceiver.ReceiveAsync();
             await messageReceiver.CompleteAsync(message.SystemProperties.LockToken);
             </code>
             </example>
             <remarks>
             The MessageReceiver provides advanced functionality that is not found in the
             <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" /> or <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" />. For instance,
             <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync" />, which allows you to receive messages on demand, but also requires
             you to manually renew locks using <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)" />.
             </remarks>
             <seealso cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" />
             <seealso cref="T:Microsoft.Azure.ServiceBus.QueueClient" />
             <seealso cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" />
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.LastPeekedSequenceNumber">
            <summary>Gets the sequence number of the last peeked message.</summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync" />
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.IClientEntity.Path" /> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> mode.
            </summary>
            <returns>The message received. Returns null if no message is found.</returns>
            <remarks>Operation will time out after duration of <see cref="P:Microsoft.Azure.ServiceBus.ClientEntity.OperationTimeout" /></remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync(System.TimeSpan)">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.IClientEntity.Path" /> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> mode.
            </summary>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>The message received. Returns null if no message is found.</returns>
            <remarks>
            The parameter <paramref name="operationTimeout" /> includes the time taken by the receiver to establish a connection
            (either during the first receive or when connection needs to be re-established). If establishing the connection
            times out, this will throw <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync(System.Int32)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount" /> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.IClientEntity.Path" /> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks>Receiving less than <paramref name="maxMessageCount" /> messages is not an indication of empty entity.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync(System.Int32,System.TimeSpan)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount" /> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.IClientEntity.Path" /> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks>Receiving less than <paramref name="maxMessageCount" /> messages is not an indication of empty entity.
            The parameter <paramref name="operationTimeout" /> includes the time taken by the receiver to establish a connection
            (either during the first receive or when connection needs to be re-established). If establishing the connection
            times out, this will throw <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveDeferredMessageAsync(System.Int64)">
            <summary>
            Receives a specific deferred message identified by <paramref name="sequenceNumber" />.
            </summary>
            <param name="sequenceNumber">The sequence number of the message that will be received.</param>
            <returns>Message identified by sequence number <paramref name="sequenceNumber" />. Returns null if no such message is found.
            Throws if the message has not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.DeferAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveDeferredMessageAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Receives a <see cref="T:System.Collections.Generic.IList`1" /> of deferred messages identified by <paramref name="sequenceNumbers" />.
            </summary>
            <param name="sequenceNumbers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the sequence numbers to receive.</param>
            <returns>Messages identified by sequence number are returned. Returns null if no messages are found.
            Throws if the messages have not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.DeferAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.CompleteAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Completes a series of <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using a list of lock tokens. This will delete the message from the service.
            </summary>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            </remarks>
            <param name="lockTokens">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the lock tokens of the corresponding messages to complete.</param>
            This operation can only be performed on messages that were received by this receiver.
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.DeferAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Indicates that the receiver wants to defer the processing for the message.</summary>
            <param name="lockToken">The lock token of the <see cref="T:Microsoft.Azure.ServiceBus.Message" />.</param>
            <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive this message again in the future, you will need to save the <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber" />
            and receive it using <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveDeferredMessageAsync(System.Int64)" />.
            Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
            </summary>
            <remarks>
            When a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /> mode, the message is locked on the server for this
            receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
            If processing of the message requires longer than this duration, the lock needs to be renewed.
            For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.RenewLockAsync(System.String)">
            <summary>
            Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
            <returns>New lock token expiry date and time in UTC format.</returns>
            </summary>
            <param name="lockToken">Lock token associated with the message.</param>
            <remarks>
            When a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /> mode, the message is locked on the server for this
            receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
            If processing of the message requires longer than this duration, the lock needs to be renewed.
            For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync">
            <summary>
            Fetches the next active message without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync" /> fetches the first active message for this receiver. Each subsequent call
            fetches the subsequent message in the entity.
            Unlike a received messaged, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Deferred/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync" />, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync(System.Int32)">
            <summary>
            Fetches the next batch of active messages without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync" /> fetches the first active message for this receiver. Each subsequent call
            fetches the subsequent message in the entity.
            Unlike a received message, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Deferred/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync" />, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>List of <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekBySequenceNumberAsync(System.Int64)">
            <summary>
            Asynchronously reads the next message without changing the state of the receiver or the message source.
            </summary>
            <param name="fromSequenceNumber">The sequence number from where to read the message.</param>
            <returns>The asynchronous operation that returns the <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekBySequenceNumberAsync(System.Int64,System.Int32)">
            <summary>Peeks a batch of messages.</summary>
            <param name="fromSequenceNumber">The starting point from which to browse a batch of messages.</param>
            <returns>A batch of messages peeked.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.IMessageSender">
             <summary>
             The MessageSender can be used to send messages to Queues or Topics.
             </summary>
             <example>
             Create a new MessageSender to send to a Queue
             <code>
             IMessageSender messageSender = new MessageSender(
                 namespaceConnectionString,
                 queueName)
             </code>
            
             Send message
             <code>
             byte[] data = GetData();
             await messageSender.SendAsync(data);
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.ServiceBus.Core.MessageSender" />
             <seealso cref="T:Microsoft.Azure.ServiceBus.QueueClient" />
             <seealso cref="T:Microsoft.Azure.ServiceBus.TopicClient" />
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.IReceiverClient">
            <summary>
            An interface used to describe common functionality for receiving messages from <see cref="T:Microsoft.Azure.ServiceBus.IQueueClient" /> and <see cref="T:Microsoft.Azure.ServiceBus.ISubscriptionClient" />.
            </summary>
            <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" /> for advanced set of functionality.</remarks>
            <seealso cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />
            <seealso cref="T:Microsoft.Azure.ServiceBus.IQueueClient" />
            <seealso cref="T:Microsoft.Azure.ServiceBus.ISubscriptionClient" />
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks>
            <para>
            When Prefetch is enabled, the receiver will quietly acquire more messages, up to the PrefetchCount limit, than what the application
            immediately asks for. A single initial Receive/ReceiveAsync call will therefore acquire a message for immediate consumption
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background.
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the
            buffer and then wait or block as expected.
            </para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> of the current receiver.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speed up the receive rate.
            Use <see cref="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)" /> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions" /> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speed up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using its lock token. This will delete the message from the queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.AbandonAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            Abandoning a message will increase the delivery count on the message.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.DeadLetterAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="propertiesToModify">The properties of the message to modify while moving to sub-queue.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.DeadLetterAsync(System.String,System.String,System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="deadLetterReason">The reason for deadlettering the message.</param>
            <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.ISenderClient">
            <summary>
            Interface that defines common send functionality between different clients.
            </summary>
            <seealso cref="T:Microsoft.Azure.ServiceBus.Core.IMessageSender" />
            <seealso cref="T:Microsoft.Azure.ServiceBus.IQueueClient" />
            <seealso cref="T:Microsoft.Azure.ServiceBus.ITopicClient" />
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus.
            </summary>
            <param name="scheduleEnqueueTimeUtc">The UTC time that the message should be available for processing</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber" /> of the message to be cancelled.</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver">
             <summary>
             The MessageReceiver can be used to receive messages from Queues and Subscriptions and acknowledge them.
             </summary>
             <example>
             Create a new MessageReceiver to receive a message from a Subscription
             <code>
             IMessageReceiver messageReceiver = new MessageReceiver(
                 namespaceConnectionString,
                 EntityNameHelper.FormatSubscriptionPath(topicName, subscriptionName),
                 ReceiveMode.PeekLock);
             </code>
            
             Receive a message from the Subscription.
             <code>
             var message = await messageReceiver.ReceiveAsync();
             await messageReceiver.CompleteAsync(message.SystemProperties.LockToken);
             </code>
             </example>
             <remarks>
             The MessageReceiver provides advanced functionality that is not found in the
             <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" /> or <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" />. For instance,
             <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync" />, which allows you to receive messages on demand, but also requires
             you to manually renew locks using <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)" />.
             It uses AMQP protocol to communicate with service.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new MessageReceiver from a <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />.
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having entity level connection details.</param>
            <param name="receiveMode">The <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" />.</param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount" /> that specifies the upper limit of messages this receiver
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new MessageReceiver from a specified connection string and entity path.
            </summary>
            <param name="connectionString">Namespace connection string used to communicate with Service Bus. Must not contain Entity details.</param>
            <param name="entityPath">The path of the entity for this receiver. For Queues this will be the name, but for Subscriptions this will be the path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubscriptionPath(System.String,System.String)" />, to help create this path.</param>
            <param name="receiveMode">The <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount" /> that specifies the upper limit of messages this receiver
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider,Microsoft.Azure.ServiceBus.TransportType,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new MessageReceiver from a specified endpoint, entity path, and token provider.
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="entityPath">Queue path.</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
            <param name="transportType">Transport type.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount" /> that specifies the upper limit of messages this receiver
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnection,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new AMQP MessageReceiver on a given <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ServiceBusConnection" />
            </summary>
            <param name="serviceBusConnection">Connection object to the service bus namespace.</param>
            <param name="entityPath">The path of the entity for this receiver. For Queues this will be the name, but for Subscriptions this will be the path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubscriptionPath(System.String,System.String)" />, to help create this path.</param>
            <param name="receiveMode">The <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount" /> that specifies the upper limit of messages this receiver
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> of the current receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks>
            <para>
            When Prefetch is enabled, the receiver will quietly acquire more messages, up to the PrefetchCount limit, than what the application
            immediately asks for. A single initial Receive/ReceiveAsync call will therefore acquire a message for immediate consumption
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background.
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the
            buffer and then wait or block as expected.
            </para>
            <para>Prefetch also works equivalently with the <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})" /> APIs.</para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.LastPeekedSequenceNumber">
            <summary>Gets the sequence number of the last peeked message.</summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync" />
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path">
            <summary>The path of the entity for this receiver. For Queues this will be the name, but for Subscriptions this will be the path.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.LockedUntilUtcInternal">
            <summary>
            Gets the DateTime that the current receiver is locked until. This is only applicable when Sessions are used.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.SessionIdInternal">
            <summary>
            Gets the SessionId of the current receiver. This is only applicable when Sessions are used.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path" /> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> mode.
            </summary>
            <returns>The message received. Returns null if no message is found.</returns>
            <remarks>Operation will time out after duration of <see cref="P:Microsoft.Azure.ServiceBus.ClientEntity.OperationTimeout" /></remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync(System.TimeSpan)">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path" /> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> mode.
            </summary>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>The message received. Returns null if no message is found.</returns>
            <remarks>
            The parameter <paramref name="operationTimeout" /> includes the time taken by the receiver to establish a connection
            (either during the first receive or when connection needs to be re-established). If establishing the connection
            times out, this will throw <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync(System.Int32)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount" /> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path" /> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks>Receiving less than <paramref name="maxMessageCount" /> messages is not an indication of empty entity.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync(System.Int32,System.TimeSpan)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount" /> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path" /> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks>Receiving less than <paramref name="maxMessageCount" /> messages is not an indication of empty entity.
            The parameter <paramref name="operationTimeout" /> includes the time taken by the receiver to establish a connection
            (either during the first receive or when connection needs to be re-established). If establishing the connection
            times out, this will throw <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveDeferredMessageAsync(System.Int64)">
            <summary>
            Receives a specific deferred message identified by <paramref name="sequenceNumber" />.
            </summary>
            <param name="sequenceNumber">The sequence number of the message that will be received.</param>
            <returns>Message identified by sequence number <paramref name="sequenceNumber" />. Returns null if no such message is found.
            Throws if the message has not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeferAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveDeferredMessageAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Receives a <see cref="T:System.Collections.Generic.IList`1" /> of deferred messages identified by <paramref name="sequenceNumbers" />.
            </summary>
            <param name="sequenceNumbers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the sequence numbers to receive.</param>
            <returns>Messages identified by sequence number are returned. Returns null if no messages are found.
            Throws if the messages have not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeferAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using its lock token. This will delete the message from the service.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.CompleteAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Completes a series of <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using a list of lock tokens. This will delete the message from the service.
            </summary>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
            <param name="lockTokens">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the lock tokens of the corresponding messages to complete.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.AbandonAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            Abandoning a message will increase the delivery count on the message.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeferAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Indicates that the receiver wants to defer the processing for the message.</summary>
            <param name="lockToken">The lock token of the <see cref="T:Microsoft.Azure.ServiceBus.Message" />.</param>
            <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive this message again in the future, you will need to save the <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber" />
            and receive it using <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveDeferredMessageAsync(System.Int64)" />.
            Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeadLetterAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="propertiesToModify">The properties of the message to modify while moving to sub-queue.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeadLetterAsync(System.String,System.String,System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="deadLetterReason">The reason for deadlettering the message.</param>
            <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the queue.
            </summary>
            <remarks>
            When a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /> mode, the message is locked on the server for this
            receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
            If processing of the message requires longer than this duration, the lock needs to be renewed.
            For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RenewLockAsync(System.String)">
            <summary>
            Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
            <returns>New lock token expiry date and time in UTC format.</returns>
            </summary>
            <param name="lockToken">Lock token associated with the message.</param>
            <remarks>
            When a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /> mode, the message is locked on the server for this
            receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
            If processing of the message requires longer than this duration, the lock needs to be renewed.
            For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync">
            <summary>
            Fetches the next active message without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync" /> fetches the first active message for this receiver. Each subsequent call
            fetches the subsequent message in the entity.
            Unlike a received message, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Deferred/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync" />, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync(System.Int32)">
            <summary>
            Fetches the next batch of active messages without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync" /> fetches the first active message for this receiver. Each subsequent call
            fetches the subsequent message in the entity.
            Unlike a received message, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Deferred/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync" />, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>List of <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekBySequenceNumberAsync(System.Int64)">
            <summary>
            Asynchronously reads the next message without changing the state of the receiver or the message source.
            </summary>
            <param name="fromSequenceNumber">The sequence number from where to read the message.</param>
            <returns>The asynchronous operation that returns the <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekBySequenceNumberAsync(System.Int64,System.Int32)">
            <summary>Peeks a batch of messages.</summary>
            <param name="fromSequenceNumber">The starting point from which to browse a batch of messages.</param>
            <param name="messageCount">The number of messages to retrieve.</param>
            <returns>A batch of messages peeked.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is used to notify exceptions.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions" /> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speed up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used with this receiver.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> of the plugin to be unregistered.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnMessageHandler(Microsoft.Azure.ServiceBus.MessageHandlerOptions,System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.MessageSender">
             <summary>
             The MessageSender can be used to send messages to Queues or Topics.
             </summary>
             <example>
             Create a new MessageSender to send to a Queue
             <code>
             IMessageSender messageSender = new MessageSender(
                 namespaceConnectionString,
                 queueName)
             </code>
            
             Send message
             <code>
             byte[] data = GetData();
             await messageSender.SendAsync(data);
             </code>
             </example>
             <remarks>This uses AMQP protocol to communicate with service.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new AMQP MessageSender.
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having entity level connection details.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new AMQP MessageSender.
            </summary>
            <param name="connectionString">Namespace connection string used to communicate with Service Bus. Must not contain Entity details.</param>
            <param name="entityPath">The path of the entity this sender should connect to.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider,Microsoft.Azure.ServiceBus.TransportType,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new MessageSender
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="entityPath">Queue path.</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
            <param name="transportType">Transport type.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnection,System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new AMQP MessageSender on a given <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageSender.ServiceBusConnection" />
            </summary>
            <param name="serviceBusConnection">Connection object to the service bus namespace.</param>
            <param name="entityPath">The path of the entity this sender should connect to.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnection,System.String,System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a ViaMessageSender. This can be used to send messages to a destination entity via another another entity.
            </summary>
            <param name="serviceBusConnection">Connection object to the service bus namespace.</param>
            <param name="entityPath">The final destination of the message.</param>
            <param name="viaEntityPath">The first destination of the message.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>
            This is mainly to be used when sending messages in a transaction.
            When messages need to be sent across entities in a single transaction, this can be used to ensure
            all the messages land initially in the same entity/partition for local transactions, and then
            let service bus handle transferring the message to the actual destination.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this sender.
            </summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageSender.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)" />
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.Path">
            <summary>
            Gets the entity path of the MessageSender.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.TransferDestinationPath">
            <summary>
            Gets the transfer destination path (send-via) of the MessageSender.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to the entity as described by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageSender.Path" />.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to the entity as described by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageSender.Path" />.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus at a later time.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that needs to be scheduled.</param>
            <param name="scheduleEnqueueTimeUtc">The UTC time at which the message should be available for processing</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber" /> of the message to be cancelled.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used with this sender.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> to be unregistered</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.OnClosingAsync">
            <summary>Closes the connection.</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin">
            <summary>
            This class provides methods that can be overridden to manipulate messages for custom plugin functionality.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name">
            <summary>
            Gets the name of the <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <remarks>This name is used to identify the plugin, and prevent a plugin from being registered multiple times.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.ShouldContinueOnException">
            <summary>
            Determines whether or an exception in the plugin should prevent a send or receive operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.BeforeMessageSend(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            This operation is called before a message is sent.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> to be modified by the plugin</param>
            <returns>The modified <see cref="T:Microsoft.Azure.ServiceBus.Message" /></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.AfterMessageReceive(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            This operation is called after a message is received, but before it is returned to the <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> to be modified by the plugin</param>
            <returns>The modified <see cref="T:Microsoft.Azure.ServiceBus.Message" /></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.EntityNameHelper">
            <summary>
            This class can be used to format the path for different Service Bus entity types.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)">
            <summary>
            Formats the dead letter path for either a queue, or a subscription.
            </summary>
            <param name="entityPath">The name of the queue, or path of the subscription.</param>
            <returns>The path as a string of the dead letter entity.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubQueuePath(System.String,System.String)">
            <summary>
            Formats the subqueue path for either a queue, or a subscription.
            </summary>
            <param name="entityPath">The name of the queue, or path of the subscription.</param>
            <returns>The path as a string of the subqueue entity.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubscriptionPath(System.String,System.String)">
            <summary>
            Formats the subscription path, based on the topic path and subscription name.
            </summary>
            <param name="topicPath">The name of the topic, including slashes.</param>
            <param name="subscriptionName">The name of the subscription.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatRulePath(System.String,System.String,System.String)">
            <summary>
            Formats the rule path, based on the topic path, subscription name and rule name.
            </summary>
            <param name="topicPath">The name of the topic, including slashes.</param>
            <param name="subscriptionName">The name of the subscription.</param>
            <param name="ruleName">The name of the rule</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatTransferDeadLetterPath(System.String)">
            <summary>
            Utility method that creates the name for the transfer dead letter receiver, specified by <paramref name="entityPath" />
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ExceptionReceivedContext">
            <summary>Context provided for <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> exception raised by the client.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedContext" /> class.</summary>
            <param name="action">The action associated with the exception.</param>
            <param name="endpoint">The endpoint associated with the exception.</param>
            <param name="entityPath">The entity path associated with the exception.</param>
            <param name="clientId">The Client Id can be used to associate with the <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" />, <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" />, <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageSender" /> or <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" /> that encountered the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.Action">
            <summary>Gets the action associated with the event.</summary>
            <value>The action associated with the event.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.Endpoint">
            <summary>The namespace name used when this exception occurred.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.EntityPath">
            <summary>The entity path used when this exception occurred.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.ClientId">
            <summary>The Client Id associated with the sender, receiver or session when this exception occurred.</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs">
            <summary>Provides data for the <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.ExceptionReceivedHandler" /> event.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs.#ctor(System.Exception,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> class.</summary>
            <param name="exception">The exception that this event data belongs to.</param>
            <param name="action">The action associated with the event.</param>
            <param name="endpoint">The endpoint used when this exception occurred.</param>
            <param name="entityName">The entity path used when this exception occurred.</param>
            <param name="clientId">The Client Id can be used to associate with the <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" />, <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" />, <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageSender" /> or <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" />that encountered the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs.Exception">
            <summary>Gets the parent class exception to which this event data belongs.</summary>
            <value>The exception, generated by the parent class, to which this event data belongs.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs.ExceptionReceivedContext">
            <summary>
            Gets the context of the exception (action, namespace name, and entity path).
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction">
            <summary>Action taking place when <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> is raised.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.Complete">
            <summary>Message completion operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.Abandon">
            <summary>Message abandon operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.UserCallback">
            <summary>User message handler invocation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.Receive">
            <summary>Message receive operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.RenewLock">
            <summary>Message lock renewal operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.AcceptMessageSession">
            <summary>Session start operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.CloseMessageSession">
            <summary>Session close operation</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer">
            <summary>
            This class describes a serializer class used to serialize and deserialize an Object.
            This class is almost identical to DataContractSerializer; only difference is that
            ReadObject(Stream) and WriteObject(Stream, object) pick Binary Xml Reader/Writer
            instead of text.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.#ctor(System.Type)">
            <summary>
            Initializes a new DataContractBinarySerializer instance
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.ReadObject(System.IO.Stream)">
            <summary>
            Converts from stream to the corresponding object
            </summary>
            <returns>Object corresponding to the stream</returns>
            <remarks>Override the default (Text) and use Binary Xml Reader instead</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteObject(System.IO.Stream,System.Object)">
            <summary>
            Serializes the object into the stream
            </summary>
            <remarks>Override the default (Text) and use Binary Xml Reader instead</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            Serializes the object into the stream using the XmlDictionaryWriter
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer`1">
            <summary>
            Returns a static <see cref="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer" /> instance of type T
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer`1.Instance">
            <summary>
            Initializes a DataContractBinarySerializer instance of type T
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.InteropExtensions.MessageInteropExtensions">
             <summary>
             A Message Extension Class that provides extension methods to deserialize
             the body of a message that was serialized and sent to ServiceBus Queue/Topic
             using the WindowsAzure.Messaging client library. The WindowsAzure.Messaging
             client library serializes objects using the
             <see cref="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer" /> (default serializer) or <see cref="T:System.Runtime.Serialization.DataContractSerializer" />
             when sending message. This class provides extension methods to deserialize
             and retrieve the body of such messages.
             </summary>
             <remarks>
             1. If a message is only being sent and received using this Microsoft.Azure.ServiceBus
             client library, then the below extension methods are not relevant and should not be used.
            
             2. If this client library will be used to receive messages that were sent using both
             WindowsAzure.Messaging client library and this (Microsoft.Azure.ServiceBus) library,
             then the Users need to add a User property <see cref="P:Microsoft.Azure.ServiceBus.Message.UserProperties" />
             while sending the message. On receiving the message, this property can be examined to
             determine if the message was from WindowsAzure.Messaging client library and if so
             use the message.GetBody() extension method to get the actual body associated with the message.
            
             ----------------------------------------------
             Scenarios to use the GetBody Extension method:
             ----------------------------------------------
             If message was constructed using the WindowsAzure.Messaging client library as follows:
             <code>
                 var message1 = new BrokeredMessage("contoso"); // Sending a plain string
                 var message2 = new BrokeredMessage(sampleObject); // Sending an actual customer object
                 var message3 = new BrokeredMessage(Encoding.UTF8.GetBytes("contoso")); // Sending a UTF8 encoded byte array object
            
                 await messageSender.SendAsync(message1);
                 await messageSender.SendAsync(message2);
                 await messageSender.SendAsync(message3);
             </code>
            
             Then retrieve the original objects using this client library as follows:
             (By default <see cref="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer" /> will be used to deserialize and retrieve the body.
              If a serializer other than that was used, pass in the serializer explicitly.)
             <code>
                 var message1 = await messageReceiver.ReceiveAsync();
                 var returnedData1 = message1.GetBody&lt;string&gt;();
            
                 var message2 = await messageReceiver.ReceiveAsync();
                 var returnedData2 = message1.GetBody&lt;SampleObject&gt;();
            
                 var message3 = await messageReceiver.ReceiveAsync();
                 var returnedData3Bytes = message1.GetBody&lt;byte[]&gt;();
                 Console.WriteLine($"Message3 String: {Encoding.UTF8.GetString(returnedData3Bytes)}");
             </code>
            
             -------------------------------------------------
             Scenarios to NOT use the GetBody Extension method:
             -------------------------------------------------
              If message was sent using the WindowsAzure.Messaging client library as follows:
                 var message4 = new BrokeredMessage(new MemoryStream(Encoding.UTF8.GetBytes("contoso")));
                 await messageSender.SendAsync(message4);
            
              Then retrieve the original objects using this client library as follows:
                 var message4 = await messageReceiver.ReceiveAsync();
                 string returned = Encoding.UTF8.GetString(message4.Body); // Since message was sent as Stream, no deserialization required here.
            
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.MessageInteropExtensions.GetBody``1(Microsoft.Azure.ServiceBus.Message,System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
            Deserializes the body of a message that was serialized using XmlObjectSerializer
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Diagnostics.MessageExtensions.ExtractActivity(Microsoft.Azure.ServiceBus.Message,System.String)">
            <summary>
            Creates <see cref="T:System.Diagnostics.Activity" /> based on the tracing context stored in the <see cref="T:Microsoft.Azure.ServiceBus.Message" />
            <param name="activityName">Optional Activity name</param>
            <returns>New <see cref="T:System.Diagnostics.Activity" /> with tracing context</returns>
            </summary>
            <remarks>
            Tracing context is used to correlate telemetry between producer and consumer and 
            represented by 'Diagnostic-Id' and 'Correlation-Context' properties in <see cref="P:Microsoft.Azure.ServiceBus.Message.UserProperties" />.
            
            .NET SDK automatically injects context when sending message to the ServiceBus (if diagnostics is enabled by tracing system).
            
            <para>
            'Diagnostic-Id' uniquely identifies operation that enqueued message
            </para>
            <para>
            'Correlation-Context' is comma separated list of sting key value pairs represeting optional context for the operation.
            </para>
            
            If there is no tracing context in the message, this method returns <see cref="T:System.Diagnostics.Activity" /> without parent.
            
            Returned <see cref="T:System.Diagnostics.Activity" /> needs to be started before it can be used (see example below)
            </remarks>
            <example>
            <code>
            async Task ProcessAsync()
            {
               var message = await messageReceiver.ReceiveAsync();
               var activity = message.ExtractActivity();
               activity.Start();
               Logger.LogInformation($"Message received, Id = {Activity.Current.Id}")
               try 
               {
                  // process message
               }
               catch (Exception ex)
               {
                    Logger.LogError($"Exception {ex}, Id = {Activity.Current.Id}")
               }
               finally 
               {
                    activity.Stop();
                    // Activity is stopped, we no longer have it in Activity.Current, let's user activity now
                    Logger.LogInformation($"Message processed, Id = {activity.Id}, Duration = {activity.Duration}")
               }
            }
            </code>
            
            Note that every log is stamped with <see cref="P:System.Diagnostics.Activity.Current" />.Id, that could be used within 
            any nested method call (sync or async) - <see cref="P:System.Diagnostics.Activity.Current" /> is an ambient context that flows with async method calls.
            
            </example>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.CorrelationFilter">
            <summary>
            Represents the correlation filter expression.
            </summary>
            <remarks>
            <para>
            A CorrelationFilter holds a set of conditions that are matched against one of more of an arriving message's user and system properties.
            A common use is a match against the <see cref="P:Microsoft.Azure.ServiceBus.Message.CorrelationId" /> property, but the application can also choose to match against
            <see cref="P:Microsoft.Azure.ServiceBus.Message.ContentType" />, <see cref="P:Microsoft.Azure.ServiceBus.Message.Label" />, <see cref="P:Microsoft.Azure.ServiceBus.Message.MessageId" />, <see cref="P:Microsoft.Azure.ServiceBus.Message.ReplyTo" />,
            <see cref="P:Microsoft.Azure.ServiceBus.Message.ReplyToSessionId" />, <see cref="P:Microsoft.Azure.ServiceBus.Message.SessionId" />, <see cref="P:Microsoft.Azure.ServiceBus.Message.To" />, and any user-defined properties.
            A match exists when an arriving message's value for a property is equal to the value specified in the correlation filter. For string expressions,
            the comparison is case-sensitive. When specifying multiple match properties, the filter combines them as a logical AND condition,
            meaning all conditions must match for the filter to match.
            </para>
            <para>
            The CorrelationFilter provides an efficient shortcut for declarations of filters that deal only with correlation equality.
            In this case the cost of the lexigraphical analysis of the expression can be avoided.
            Not only will correlation filters be optimized at declaration time, but they will also be optimized at runtime.
            Correlation filter matching can be reduced to a hashtable lookup, which aggregates the complexity of the set of defined correlation filters to O(1).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.CorrelationFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.CorrelationFilter" /> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.CorrelationFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.CorrelationFilter" /> class with the specified correlation identifier.
            </summary>
            <param name="correlationId">The identifier for the correlation.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="correlationId" /> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.CorrelationId">
            <summary>
            Identifier of the correlation.
            </summary>
            <value>The identifier of the correlation.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.MessageId">
            <summary>
            Identifier of the message.
            </summary>
            <value>The identifier of the message.</value>
            <remarks>Max MessageId size is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.To">
            <summary>
            Address to send to.
            </summary>
            <value>The address to send to.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.ReplyTo">
            <summary>
            Address of the queue to reply to.
            </summary>
            <value>The address of the queue to reply to.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.Label">
            <summary>
            Application specific label.
            </summary>
            <value>The application specific label.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.SessionId">
            <summary>
            Session identifier.
            </summary>
            <value>The session identifier.</value>
            <remarks>Max size of sessionId is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.ReplyToSessionId">
            <summary>
            Session identifier to reply to.
            </summary>
            <value>The session identifier to reply to.</value>
            <remarks>Max size of ReplyToSessionId is 128.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.ContentType">
            <summary>
            Content type of the message.
            </summary>
            <value>The content type of the message.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.Properties">
            <summary>
            Application specific properties of the message.
            </summary>
            <value>The application specific properties of the message.</value>
            <remarks>
            Only following value types are supported:
            byte, sbyte, char, short, ushort, int, uint, long, ulong, float, double, decimal,
            bool, Guid, string, Uri, DateTime, DateTimeOffset, TimeSpan, Stream, byte[],
            and IList / IDictionary of supported types
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.CorrelationFilter.ToString">
            <summary>
            Converts the value of the current instance to its equivalent string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.FalseFilter">
            <summary>
            Matches none the messages arriving to be selected for the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.FalseFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.FalseFilter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.FalseFilter.ToString">
            <summary>
            Converts the current instance to its string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Filter">
            <summary>
            Describes a filter expression that is evaluated against a Message.
            </summary>
            <remarks>
            Filter is an abstract class with the following concrete implementations:
            <list type="bullet">
            <item><b>SqlFilter</b> that represents a filter using SQL syntax. </item>
            <item><b>CorrelationFilter</b> that provides an optimization for correlation equality expressions.</item>
            </list>
            </remarks>
            <seealso cref="T:Microsoft.Azure.ServiceBus.SqlFilter" />
            <seealso cref="T:Microsoft.Azure.ServiceBus.TrueFilter" />
            <seealso cref="T:Microsoft.Azure.ServiceBus.CorrelationFilter" />
            <seealso cref="T:Microsoft.Azure.ServiceBus.FalseFilter" />
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RuleAction">
            <summary>
            Represents the filter actions which are allowed for the transformation
            of a message that have been matched by a filter expression.
            </summary>
            <remarks>
            Filter actions allow for the transformation of a message that have been matched by a filter expression.
            The typical use case for filter actions is to append or update the properties that are attached to a message,
            for example assigning a group ID based on the correlation ID of a message.
            </remarks>
            <seealso cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction" />
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RuleDescription">
            <summary>
            Represents a description of a rule.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName">
            <summary>
            Gets the name of the default rule on the subscription.
            </summary>
            <remarks>
            Whenever a new subscription is created, a default rule is always added.
            The default rule is a <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter" /> which will enable all messages in the topic to reach subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor(Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with the specified filter expression.
            </summary>
            <param name="filter">The filter expression used to match messages.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor(System.String,Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with the specified name and filter expression.
            </summary>
            <param name="filter">The filter expression used to match messages.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RuleDescription.Filter">
            <summary>
            Gets or sets the filter expression used to match messages.
            </summary>
            <value>The filter expression used to match messages.</value>
            <exception cref="T:System.ArgumentNullException">null (Nothing in Visual Basic) is assigned.</exception>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RuleDescription.Action">
            <summary>
            Gets or sets the action to perform if the message satisfies the filtering expression.
            </summary>
            <value>The action to perform if the message satisfies the filtering expression.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RuleDescription.Name">
            <summary>
            Gets or sets the name of the rule.
            </summary>
            <value>Returns a <see cref="T:System.String" /> Representing the name of the rule.</value>
            <remarks>Max allowed length of rule name is 50 chars.</remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SqlFilter">
            <summary>
            Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter" /> holds a SQL-like condition expression that is evaluated in the broker against the arriving messages'
            user-defined properties and system properties. All system properties (which are all properties explicitly listed
            on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /> class) must be prefixed with <code>sys.</code> in the condition expression. The SQL subset implements
            testing for existence of properties (EXISTS), testing for null-values (IS NULL), logical NOT/AND/OR, relational operators,
            numeric arithmetic, and simple text pattern matching with LIKE.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter" /> class using the specified SQL expression.
            </summary>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlFilter.SqlExpression">
            <summary>
            Gets the SQL expression.
            </summary>
            <value>The SQL expression.</value>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlFilter.Parameters">
            <summary>
            Sets the value of a filter expression.
            Allowed types: string, int, long, bool, double
            </summary>
            <value>The value of a filter expression.</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlFilter.ToString">
            <summary>
            Returns a string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter" />.
            </summary>
            <returns>The string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter" />.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SqlRuleAction">
            <summary>
            Represents set of actions written in SQL language-based syntax that is performed against a <see cref="T:Microsoft.Azure.ServiceBus.Message" />.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlRuleAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction" /> class with the specified SQL expression.
            </summary>
            <param name="sqlExpression">The SQL expression.</param>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlRuleAction.SqlExpression">
            <summary>
            Gets the SQL expression.
            </summary>
            <value>The SQL expression.</value>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlRuleAction.Parameters">
            <summary>
            Sets the value of a rule action.
            </summary>
            <value>The value of a rule action.</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlRuleAction.ToString">
            <summary>
            Returns a string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction" />.
            </summary>
            <returns>The string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction" />.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.TrueFilter">
            <summary>
            Matches all the messages arriving to be selected for the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TrueFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TrueFilter.ToString">
            <summary>
            Converts the value of the current instance to its equivalent string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.IClientEntity">
            <summary>
            An interface showing the common functionality between all Service Bus clients.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.ClientId">
            <summary>
            Gets the ID to identify this client. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new client has a unique ID (in that process).</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.IsClosedOrClosing">
            <summary>
            Returns true if the client is closed or closing.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.Path">
            <summary>
            Gets the entity path.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IClientEntity.CloseAsync">
            <summary>
            Closes the Client. Closes the connections opened by it.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IClientEntity.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used with this client.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IClientEntity.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.IMessageSession">
            <summary>
            Describes a Session object. IMessageSession can be used to perform operations on sessions.
            </summary>
            <remarks>
            <para>
            Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session.
            </para>
            <para>
            Any sender can create a session when submitting messages into a Topic or Queue by setting the <see cref="P:Microsoft.Azure.ServiceBus.Message.SessionId" /> property on Message to some
            application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property.
            </para>
            <para>
            Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription.
            Once a Session exists, there is no defined moment or gesture for when the session expires or disappears.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId">
            <summary>
            Gets the SessionId.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IMessageSession.LockedUntilUtc">
            <summary>
            Gets the time that the session identified by <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" /> is locked until for this client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IMessageSession.GetStateAsync">
            <summary>
            Gets the session state.
            </summary>
            <returns>The session state as byte array.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IMessageSession.SetStateAsync(System.Byte[])">
            <summary>
            Set a custom state on the session which can be later retrieved using <see cref="M:Microsoft.Azure.ServiceBus.IMessageSession.GetStateAsync" />
            </summary>
            <param name="sessionState">A byte array of session state</param>
            <remarks>This state is stored on Service Bus forever unless you set an empty state on it.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IMessageSession.RenewSessionLockAsync">
            <summary>
            Renews the lock on the session specified by the <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" />. The lock will be renewed based on the setting specified on the entity.
            </summary>
            <remarks>
            <para>
            When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation.
            If processing of the session requires longer than this duration, the session-lock needs to be renewed. 
            For each renewal, it resets the time the session is locked by the LockDuration set on the Entity.
            </para>
            <para>
            Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.IQueueClient">
             <summary>
             QueueClient can be used for all basic interactions with a Service Bus Queue.
             </summary>
             <example>
             Create a new QueueClient
             <code>
             IQueueClient queueClient = new QueueClient(
                 namespaceConnectionString,
                 queueName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
            
             Send a message to the queue:
             <code>
             byte[] data = GetData();
             await queueClient.SendAsync(data);
             </code>
            
             Register a message handler which will be invoked every time a message is received.
             <code>
             queueClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the queueClient is opened in ReceiveMode.PeekLock mode.
                        await queueClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageSender" /> or <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" /> for advanced set of functionality.</remarks>
             <seealso cref="T:Microsoft.Azure.ServiceBus.QueueClient" />
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IQueueClient.QueueName">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IQueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speed up the receive rate.
            Use <see cref="M:Microsoft.Azure.ServiceBus.IQueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" /> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IQueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>Enable prefetch to speed up the receive rate. </remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ISessionClient">
             <summary>
             Describes a Session client. A session client can be used to accept session objects which can be used to interact with all messages with the same sessionId.
             </summary>
             <remarks>
             You can accept any session or a given session (identified by <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" /> using a session client.
             Once you accept a session, you can use it as a <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" /> which receives only messages having the same session id.
             See <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> for usage of session object.
             <example>
             To create a new SessionClient
             <code>
             ISessionClient sessionClient = new SessionClient(
                 namespaceConnectionString,
                 queueName,
                 ReceiveMode.PeekLock);
             </code>
            
             To receive a session object for a given sessionId
             <code>
             IMessageSession session = await sessionClient.AcceptMessageSessionAsync(sessionId);
             </code>
            
             To receive any session
             <code>
             IMessageSession session = await sessionClient.AcceptMessageSessionAsync();
             </code>
             </example>
             </remarks>
             <seealso cref="T:Microsoft.Azure.ServiceBus.IMessageSession" />
             <seealso cref="T:Microsoft.Azure.ServiceBus.SessionClient" />
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ISessionClient.EntityPath">
            <summary>
            Gets the path of the entity. This is either the name of the queue, or the full path of the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync(System.TimeSpan)">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <param name="operationTimeout">Amount of time for which the call should wait for to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync(System.String)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <param name="operationTimeout">Amount of time for which the call should wait for to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ISubscriptionClient">
             <summary>
             SubscriptionClient can be used for all basic interactions with a Service Bus Subscription.
             </summary>
             <example>
             Create a new SubscriptionClient
             <code>
             ISubscriptionClient subscriptionClient = new SubscriptionClient(
                 namespaceConnectionString,
                 topicName,
                 subscriptionName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
            
             Register a message handler which will be invoked every time a message is received.
             <code>
             subscriptionClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the subscriptionClient is opened in ReceiveMode.PeekLock mode.
                        await subscriptionClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" /> for advanced set of functionality.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ISubscriptionClient.TopicPath">
            <summary>
            Gets the path of the topic, for this subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ISubscriptionClient.SubscriptionName">
            <summary>
            Gets the name of subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.AddRuleAsync(System.String,Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="filter">The filter expression against which messages will be matched.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that will decide filter which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter" /> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName" /> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription.
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.AddRuleAsync(Microsoft.Azure.ServiceBus.RuleDescription)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="description">The rule description that provides the rule to add.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that will decide filter which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter" /> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName" /> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription.
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RemoveRuleAsync(System.String)">
            <summary>
            Removes the rule on the subscription identified by <paramref name="ruleName" />.
            </summary>
            <returns>A task instance that represents the asynchronous remove rule operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.GetRulesAsync">
            <summary>
            Get all rules associated with the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continuously from the subscription. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speed up the receive rate.
            Use <see cref="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" /> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continuously from the subscription. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>Enable prefetch to speed up the receive rate. </remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ITopicClient">
             <summary>
             TopicClient can be used for all basic interactions with a Service Bus topic.
             </summary>
             <example>
             Create a new TopicClient
             <code>
             ITopicClient topicClient = new TopicClient(
                 namespaceConnectionString,
                 topicName,
                 RetryExponential);
             </code>
            
             Send a message to the topic:
             <code>
             byte[] data = GetData();
             await topicClient.SendAsync(data);
             </code>
             </example>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ITopicClient.TopicName">
            <summary>
            Gets the name of the topic.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.AccessRights.Manage">
            <summary>The access right is Manage.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.AccessRights.Send">
            <summary>The access right is Send.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.AccessRights.Listen">
            <summary>The access right is Listen.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.AuthorizationRule.ClaimType">
            <summary>Gets or sets the claim type.</summary>
            <value>The claim type.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.AuthorizationRule.Rights">
            <summary>Gets or sets the list of rights.</summary>
            <value>The list of rights.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.AuthorizationRule.KeyName">
            <summary>Gets or sets the authorization rule key name.</summary>
            <value>The authorization rule key name.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.AuthorizationRule.CreatedTime">
            <summary>Gets or sets the date and time when the authorization rule was created.</summary>
            <value>The date and time when the authorization rule was created.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.AuthorizationRule.ModifiedTime">
            <summary>Gets or sets the date and time when the authorization rule was modified.</summary>
            <value>The date and time when the authorization rule was modified.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.AuthorizationRule.ClaimValue">
            <summary>Gets or sets the claim value which is either ‘Send’, ‘Listen’, or ‘Manage’.</summary>
            <value>The claim value which is either ‘Send’, ‘Listen’, or ‘Manage’.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.EntityStatus">
            <summary>The status of the messaging entity.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.EntityStatus.Active">
            <summary>The status of the messaging entity is active.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.EntityStatus.Disabled">
            <summary>The status of the messaging entity is disabled.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.EntityStatus.SendDisabled">
            <summary>The sending status of the messaging entity is disabled.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.EntityStatus.ReceiveDisabled">
            <summary>The receiving status of the messaging entity is disabled.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.EntityStatus.Unknown">
            <summary>The status of the messaging entity is unknown.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> which can be used to perform management opertions on ServiceBus entities.
            </summary>
            <param name="connectionString">Namespace connection string.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.#ctor(System.String,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider)">
            <summary>
            Initializes a new <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> which can be used to perform management opertions on ServiceBus entities.
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider)">
            <summary>
            Initializes a new <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> which can be used to perform management opertions on ServiceBus entities.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having endpoint information.</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.DeleteQueueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the queue described by the path relative to the service namespace base address.
            </summary>
            <param name="queuePath">The name of the queue relative to the service namespace base address.</param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentException"><paramref name="queuePath" /> is empty or null, or path starts or ends with "/".</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of path is greater than 260.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Queue with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.DeleteTopicAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the topic described by the name relative to the service namespace base address.
            </summary>
            <param name="topicPath">The name of the topic relative to the service namespace base address.</param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentException"><paramref name="topicPath" /> is empty or null, or path starts or ends with "/".</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Topic with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.DeleteSubscriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the subscription with the specified topic and subscription name.
            </summary>
            <param name="topicPath">The name of the topic relative to the service namespace base address.</param>
            <param name="subscriptionName">The name of the subscription to delete.</param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentException"><paramref name="topicPath" /> or <paramref name="subscriptionName" /> is empty or null, or path starts or ends with "/".</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260 or length of subscription name is greater than 50.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Subscription with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.DeleteRuleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the rule described by <paramref name="ruleName" /> from <paramref name="subscriptionName" /> under <paramref name="topicPath" />./&gt;
            </summary>
            <param name="topicPath">The name of the topic relative to the service namespace base address.</param>
            <param name="subscriptionName">The name of the subscription to delete.</param>
            <param name="ruleName">The name of the rule to delete.</param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicPath" />, <paramref name="subscriptionName" />, or <paramref name="ruleName" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260 or length of subscription-name/rule-name is greater than 50.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Rule with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetQueueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a queue from the service namespace.
            </summary>
            <param name="queuePath">The path of the queue relative to service bus namespace.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Management.QueueDescription" /> containing information about the queue.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="queuePath" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of queue path is greater than 260.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Queue with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetTopicAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a topic from the service namespace.
            </summary>
            <param name="topicPath">The path of the topic relative to service bus namespace.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> containing information about the topic.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicPath" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Topic with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetSubscriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a subscription from the service namespace.
            </summary>
            <param name="topicPath">The path of the topic relative to service bus namespace.</param>
            <param name="subscriptionName">The subscription name.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> containing information about the subscription.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicPath" />, <paramref name="subscriptionName" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260 or length of subscription-name is greater than 50.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Topic or Subscription with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetRuleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a rule from the service namespace.
            </summary>
            <param name="topicPath">The path of the topic relative to service bus namespace.</param>
            <param name="subscriptionName">The subscription name the rule belongs to.</param>
            <param name="ruleName">The name of the rule to retrieve.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> containing information about the rule.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicPath" />, <paramref name="subscriptionName" /> or <paramref name="ruleName" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260 or length of subscription-name/rule-name is greater than 50.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Topic/Subscription/Rule with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
            <remarks>Note - Only following data types are deserialized in Filters and Action parameters - string,int,long,bool,double,DateTime.
            Other data types would return its string value.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetQueueRuntimeInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the runtime information of a queue.
            </summary>
            <param name="queuePath">The path of the queue relative to service bus namespace.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo" /> containing runtime information about the queue.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="queuePath" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of queue path is greater than 260.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Queue with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetTopicRuntimeInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the runtime information of a topic.
            </summary>
            <param name="topicPath">The path of the topic relative to service bus namespace.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo" /> containing runtime information about the topic.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicPath" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Topic with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetSubscriptionRuntimeInfoAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the runtime information of a subscription.
            </summary>
            <param name="topicPath">The path of the topic relative to service bus namespace.</param>
            <param name="subscriptionName">The subscription name.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo" /> containing runtime information about the subscription.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicPath" />, <paramref name="subscriptionName" /> is null, white space empty or not in the right format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of topic path is greater than 260 or length of subscription-name is greater than 50.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Topic or Subscription with this name does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetQueuesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of queues present in the namespace.
            </summary>
            <param name="count">The number of queues to fetch. Defaults to 100. Maximum value allowed is 100.</param>
            <param name="skip">The number of queues to skip. Defaults to 0. Cannot be negative.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:System.Collections.Generic.IList`1" /> containing list of queues.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
            <remarks>You can simulate pages of list of entities by manipulating <paramref name="count" /> and <paramref name="skip" />.
            skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetTopicsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of topics present in the namespace.
            </summary>
            <param name="count">The number of topics to fetch. Defaults to 100. Maximum value allowed is 100.</param>
            <param name="skip">The number of topics to skip. Defaults to 0. Cannot be negative.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:System.Collections.Generic.IList`1" /> containing list of topics.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
            <remarks>You can simulate pages of list of entities by manipulating <paramref name="count" /> and <paramref name="skip" />.
            skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetSubscriptionsAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of subscriptions present in the topic.
            </summary>
            <param name="topicPath">The topic path under which all the subscriptions need to be retrieved.</param>
            <param name="count">The number of subscriptions to fetch. Defaults to 100. Maximum value allowed is 100.</param>
            <param name="skip">The number of subscriptions to skip. Defaults to 0. Cannot be negative.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:System.Collections.Generic.IList`1" /> containing list of subscriptions.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
            <remarks>You can simulate pages of list of entities by manipulating <paramref name="count" /> and <paramref name="skip" />.
            skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.GetRulesAsync(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of rules for a given subscription in a topic.
            </summary>
            <param name="topicPath">The topic path.</param>
            <param name="subscriptionName"> The subscription for which all the rules need to be retrieved.</param>
            <param name="count">The number of rules to fetch. Defaults to 100. Maximum value allowed is 100.</param>
            <param name="skip">The number of rules to skip. Defaults to 0. Cannot be negative.</param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:System.Collections.Generic.IList`1" /> containing list of rules.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
            <remarks>You can simulate pages of list of entities by manipulating <paramref name="count" /> and <paramref name="skip" />.
            skip(0)+count(100) gives first 100 entities. skip(100)+count(100) gives the next 100 entities.
            Note - Only following data types are deserialized in Filters and Action parameters - string,int,long,bool,double,DateTime.
            Other data types would return its string value.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateQueueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new queue in the service namespace with the given name.
            </summary>
            <remarks>Throws if a queue already exists. <see cref="T:Microsoft.Azure.ServiceBus.Management.QueueDescription" /> for default values of queue properties.</remarks>
            <param name="queuePath">The name of the queue relative to the service namespace base address.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.QueueDescription" /> of the newly created queue.</returns>
            <exception cref="T:System.ArgumentNullException">Queue name is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="queuePath" /> is greater than 260 characters.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">An entity with the same name exists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateQueueAsync(Microsoft.Azure.ServiceBus.Management.QueueDescription,System.Threading.CancellationToken)">
            <summary>
            Creates a new queue in the service namespace with the given name.
            </summary>
            <remarks>Throws if a queue already exists.</remarks>
            <param name="queueDescription">A <see cref="T:Microsoft.Azure.ServiceBus.Management.QueueDescription" /> object describing the attributes with which the new queue will be created.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.QueueDescription" /> of the newly created queue.</returns>
            <exception cref="T:System.ArgumentNullException">Queue name is null or empty.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">A queue with the same nameexists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateTopicAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new topic in the service namespace with the given name.
            </summary>
            <remarks>Throws if a topic already exists. <see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> for default values of topic properties.</remarks>
            <param name="topicPath">The name of the topic relative to the service namespace base address.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> of the newly created topic.</returns>
            <exception cref="T:System.ArgumentNullException">Topic name is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="topicPath" /> is greater than 260 characters.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">A topic with the same name exists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateTopicAsync(Microsoft.Azure.ServiceBus.Management.TopicDescription,System.Threading.CancellationToken)">
            <summary>
            Creates a new topic in the service namespace with the given name.
            </summary>
            <remarks>Throws if a topic already exists. <see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> for default values of topic properties.</remarks>
            <param name="topicDescription">A <see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> object describing the attributes with which the new topic will be created.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> of the newly created topic.</returns>
            <exception cref="T:System.ArgumentNullException">Topic description is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">A topic with the same name exists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateSubscriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new subscription within a topic in the service namespace with the given name.
            </summary>
            <remarks>Throws if a subscription already exists. <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> for default values of subscription properties.
            Be default, A "pass-through" filter is created for this subscription, which means it will allow all messages to go to this subscription. The name of the filter is represented by <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName" />.
            <see cref="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription,Microsoft.Azure.ServiceBus.RuleDescription,System.Threading.CancellationToken)" /> for creating subscription with a different filter.</remarks>
            <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
            <param name="subscriptionName">The name of the subscription.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> of the newly created subscription.</returns>
            <exception cref="T:System.ArgumentNullException">Topic path or subscription name is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="topicPath" /> is greater than 260 characters or <paramref name="subscriptionName" /> is greater than 50 characters.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">A subscription with the same name exists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription,System.Threading.CancellationToken)">
            <summary>
            Creates a new subscription within a topic in the service namespace with the given name.
            </summary>
            <remarks>Throws if a subscription already exists.
            Be default, A "pass-through" filter is created for this subscription, which means it will allow all messages to go to this subscription. The name of the filter is represented by <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName" />.
            <see cref="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription,Microsoft.Azure.ServiceBus.RuleDescription,System.Threading.CancellationToken)" /> for creating subscription with a different filter.</remarks>
            <param name="subscriptionDescription">A <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> of the newly created subscription.</returns>
            <exception cref="T:System.ArgumentNullException">Subscription description is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">A subscription with the same name exists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription,Microsoft.Azure.ServiceBus.RuleDescription,System.Threading.CancellationToken)">
            <summary>
            Creates a new subscription within a topic with the provided default rule.
            </summary>
            <remarks>Throws if a subscription already exists. </remarks>
            <param name="subscriptionDescription">A <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
            <param name="defaultRule"> A <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> object describing the default rule. If null, then pass-through filter with name <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName" /> will be created.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> of the newly created subscription.</returns>
            <exception cref="T:System.ArgumentNullException">Subscription description is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">A subscription with the same name exists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.CreateRuleAsync(System.String,System.String,Microsoft.Azure.ServiceBus.RuleDescription,System.Threading.CancellationToken)">
            <summary>
            Adds a new rule to the subscription under given topic.
            </summary>
            <param name="topicName">The topic name relative to the service namespace base address.</param>
            <param name="subscriptionName">The name of the subscription.</param>
            <param name="ruleDescription">A <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> object describing the attributes with which the messages are matched and acted upon.</param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentNullException">Subscription or rule description is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">A subscription with the same name exists under the same service namespace.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnection" /> class. You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> of the recently created rule.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.UpdateQueueAsync(Microsoft.Azure.ServiceBus.Management.QueueDescription,System.Threading.CancellationToken)">
            <summary>
            Updates an existing queue.
            </summary>
            <param name="queueDescription">A <see cref="T:Microsoft.Azure.ServiceBus.Management.QueueDescription" /> object describing the attributes with which the queue will be updated.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.QueueDescription" /> of the updated queue.</returns>
            <exception cref="T:System.ArgumentNullException">Queue descriptor is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Described queue was not found.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.UpdateTopicAsync(Microsoft.Azure.ServiceBus.Management.TopicDescription,System.Threading.CancellationToken)">
            <summary>
            Updates an existing topic.
            </summary>
            <param name="topicDescription">A <see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> object describing the attributes with which the topic will be updated.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.TopicDescription" /> of the updated topic.</returns>
            <exception cref="T:System.ArgumentNullException">Topic descriptor is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Described topic was not found.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.UpdateSubscriptionAsync(Microsoft.Azure.ServiceBus.Management.SubscriptionDescription,System.Threading.CancellationToken)">
            <summary>
            Updates an existing subscription under a topic.
            </summary>
            <param name="subscriptionDescription">A <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> object describing the attributes with which the subscription will be updated.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription" /> of the updated subscription.</returns>
            <exception cref="T:System.ArgumentNullException">subscription descriptor is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Described subscription was not found.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.UpdateRuleAsync(System.String,System.String,Microsoft.Azure.ServiceBus.RuleDescription,System.Threading.CancellationToken)">
            <summary>
            Updates an existing rule for a topic-subscription.
            </summary>
            <param name="topicPath">Path of the topic.</param>
            <param name="subscriptionName">Name of the subscription.</param>
            <param name="ruleDescription">A <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> object describing the attributes with which the rule will be updated.</param>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> of the updated rule.</returns>
            <exception cref="T:System.ArgumentNullException">rule descriptor is null.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">Described topic/subscription/rule was not found.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.QueueExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether a given queue exists or not.
            </summary>
            <param name="queuePath">Path of the queue entity to check.</param>
            <param name="cancellationToken"></param>
            <returns>True if queue exists, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Queue path provided is not valid.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.TopicExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether a given topic exists or not.
            </summary>
            <param name="topicPath">Path of the topic entity to check.</param>
            <param name="cancellationToken"></param>
            <returns>True if topic exists, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">topic path provided is not valid.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.ManagementClient.SubscriptionExistsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether a given subscription exists or not.
            </summary>
            <param name="topicPath">Path of the topic.</param>
            <param name="subscriptionName">Name of the subscription to check.</param>
            <param name="cancellationToken"></param>
            <returns>True if subscription exists, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">topic or subscription path provided is not valid.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">The operation times out.</exception>
            <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.Azure.ServiceBus.Management.ManagementClient" /> has the correct <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> credentials to perform this operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServerBusyException">The server is busy. You should wait before you retry the operation.</exception>
            <exception cref="T:Microsoft.Azure.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes">
            <summary>Specifies the error codes of the exceptions.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.BadRequest">
            <summary>A parse error encountered while processing a request.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.UnauthorizedGeneric">
            <summary>A generic unauthorized error.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.NoTransportSecurity">
            <summary>The service bus has no transport security.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.MissingToken">
            <summary>The token is missing.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.InvalidSignature">
            <summary>The signature is invalid.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.InvalidAudience">
            <summary>The audience is invalid.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.MalformedToken">
            <summary>A malformed token.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ExpiredToken">
            <summary>The token had expired.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.AudienceNotFound">
            <summary>The audience is not found.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ExpiresOnNotFound">
            <summary>The expiry date not found.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.IssuerNotFound">
            <summary>The issuer cannot be found.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.SignatureNotFound">
            <summary>The signature cannot be found.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.IpRejected">
            <summary>The incoming ip has been rejected by policy.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.IpNotInAcledSubNet">
            <summary>The incoming ip is not in acled subnet.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ForbiddenGeneric">
            <summary>A generic forbidden error.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ForbiddenInvalidOperation">
            <summary>Operation is not allowed.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.EndpointNotFound">
            <summary>The endpoint is not found.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.InvalidDestination">
            <summary>The destination is invalid.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.NamespaceNotFound">
            <summary>The namespace is not found.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.StoreLockLost">
            <summary>The store lock is lost.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.SqlFiltersExceeded">
            <summary>The SQL filters exceeded its allowable maximum number.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.CorrelationFiltersExceeded">
            <summary>The correlation filters exceeded its allowable maximum number.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.SubscriptionsExceeded">
            <summary>The subscriptions exceeded its allowable maximum number.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.UpdateConflict">
            <summary>A conflict during updating occurred.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.EventHubAtFullCapacity">
            <summary>The Event Hub is at full capacity.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ConflictGeneric">
            <summary>A generic conflict error.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ConflictOperationInProgress">
            <summary>An operation is in progress.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.EntityGone">
            <summary>The entity is not found.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.UnspecifiedInternalError">
            <summary>An internal error that is not specified.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.DataCommunicationError">
            <summary>The error of data communication.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.InternalFailure">
            <summary>An internal error.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ProviderUnreachable">
            <summary>The provider is unreachable.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ServerBusy">
            <summary>The server is busy.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.ArchiveStorageAccountServerBusy">
            <summary> Archive Storage Account Server is busy. </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.InvalidArchiveStorageAccountResourceId">
            <summary> Archive Storage Account ResourceId is invalid. </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.BadGatewayFailure">
            <summary>The error is caused by bad gateway.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.GatewayTimeoutFailure">
            <summary>The gateway did not receive a timely response from the upstream server.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Management.ManagementClientConstants.ExceptionErrorCodes.UnknownExceptionDetail">
            <summary>This exception detail will be used for those exceptions that are thrown without specific any explicit exception detail.</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.MessageCountDetails">
            <summary>
            Message count details of the sub-queues of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.MessageCountDetails.ActiveMessageCount">
            <summary>
            The number of active messages in the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.MessageCountDetails.DeadLetterMessageCount">
            <summary>
            The number of dead-lettered messages in the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.MessageCountDetails.ScheduledMessageCount">
            <summary>
            The number of messages which are yet to be scheduled.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.MessageCountDetails.TransferMessageCount">
            <summary>
            The number of messages which are yet to be transferred/forwarded to destination entity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.MessageCountDetails.TransferDeadLetterMessageCount">
            <summary>
            The number of messages transfer-messages which are dead-lettered into transfer-dead-letter sub-queue.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.MessagingEntityAlreadyExistsException">
            <summary>
            The exception that is thrown when an already existing entity is being re created.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.QueueDescription">
            <summary>
            Represents the metadata description of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.QueueDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of QueueDescription class with the specified relative path.
            </summary>
            <param name="path">Path of the queue relative to the namespace base address.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.Path">
            <summary>
            Path of the queue relative to the namespace base address.
            </summary>
            <remarks>Max length is 260 chars. Cannot start or end with a slash. 
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.LockDuration">
            <summary>
            Duration of a peek lock receive. i.e., the amount of time that the message is locked by a given receiver so that
            no other receiver receives the same message.
            </summary>
            <remarks>Max value is 5 minutes. Default value is 60 seconds.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.MaxSizeInMB">
            <summary>
            The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
            </summary>
            <remarks>Default value is 1024.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.RequiresDuplicateDetection">
            <summary>
            This value indicates if the queue requires guard against duplicate messages. If true, duplicate messages having same
            <see cref="P:Microsoft.Azure.ServiceBus.Message.MessageId" /> and sent to queue within duration of <see cref="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.DuplicateDetectionHistoryTimeWindow" />
            will be discarded.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.RequiresSession">
            <summary>
            This indicates whether the queue supports the concept of session. Sessionful-messages follow FIFO ordering.
            </summary>
            <remarks>
            If true, the receiver can only recieve messages using <see cref="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync" />.
            Defaults to false. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Microsoft.Azure.ServiceBus.Message.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages. 
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the queue is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.EnableDeadLetteringOnMessageExpiration">
            <summary>
            Indicates whether this queue has dead letter support when a message expires.
            </summary>
            <remarks>If true, the expired messages are moved to dead-letter sub-queue. Default value is false.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.DuplicateDetectionHistoryTimeWindow">
            <summary>
            The <see cref="T:System.TimeSpan" /> duration of duplicate detection history that is maintained by the service.
            </summary>
            <remarks>
            The default value is 1 minute. Max value is 1 day and minimum is 20 seconds.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.MaxDeliveryCount">
            <summary>
            The maximum delivery count of a message before it is dead-lettered.
            </summary>
            <remarks>The delivery count is increased when a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /> mode 
            and didn't complete the message before the message lock expired.
            Default value is 10. Minimum value is 1.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.AuthorizationRules">
            <summary>
            The <see cref="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.AuthorizationRules" /> on the queue to control user access at entity level.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.Status">
            <summary>
            The current status of the queue (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.ForwardTo">
            <summary>
            The path of the recipient entity to which all the messages sent to the queue are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive messages from this queue. The destination entity 
            must be an already existing entity.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.ForwardDeadLetteredMessagesTo">
            <summary>
            The path of the recipient entity to which all the dead-lettered messages of this queue are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive dead-lettered messages from this queue. The destination
            entity must already exist.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.EnablePartitioning">
            <summary>
            Indicates whether the queue is to be partitioned across multiple message brokers.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.UserMetadata">
            <summary>
            Custom metdata that user can associate with the description.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueDescription.UnknownProperties">
            <summary>
            List of properties that were retrieved using GetQueue but are not understood by this version of client is stored here.
            The list will be sent back when an already retrieved QueueDescription will be used in UpdateQueue call.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo">
            <summary>
            This provides runtime information of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo.Path">
            <summary>
            The path of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo.MessageCount">
            <summary>
            The total number of messages in the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo.MessageCountDetails">
            <summary>
            Message count details of the sub-queues of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo.SizeInBytes">
            <summary>
            Current size of the entity in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo.CreatedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity was created.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo.UpdatedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity description was last updated.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.QueueRuntimeInfo.AccessedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity was last accessed.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule">
            <summary>
            Defines the authorization rule for an entity using SAS.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.ServiceBus.Management.AccessRights})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule" /> class.</summary>
            <param name="keyName">The authorization rule key name.</param>
            <param name="rights">The list of rights.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.ServiceBus.Management.AccessRights})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule" /> class.</summary>
            <param name="keyName">The authorization rule key name.</param>
            <param name="primaryKey">The primary key for the authorization rule.</param>
            <param name="rights">The list of rights.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.ServiceBus.Management.AccessRights})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule" /> class.</summary>
            <param name="keyName">The authorization rule key name.</param>
            <param name="primaryKey">The primary key for the authorization rule.</param>
            <param name="secondaryKey">The secondary key for the authorization rule.</param>
            <param name="rights">The list of rights.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.KeyName">
            <summary>Gets or sets the authorization rule key name.</summary>
            <value>The authorization rule key name.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.PrimaryKey">
            <summary>Gets or sets the primary key for the authorization rule.</summary>
            <value>The primary key for the authorization rule.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.SecondaryKey">
            <summary>Gets or sets the secondary key for the authorization rule.</summary>
            <value>The secondary key for the authorization rule.</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.Equals(Microsoft.Azure.ServiceBus.Management.AuthorizationRule)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.SharedAccessAuthorizationRule.GenerateRandomKey">
            <summary>Generates the random key for the authorization rule.</summary>        
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription">
            <summary>
            Represents the metadata description of the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of SubscriptionDescription class with the specified name and topic path.
            </summary>
            <param name="topicPath">Path of the topic relative to the namespace base address.</param>
            <param name="subscriptionName">Name of the subscription.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.LockDuration">
            <summary>
            Duration of a peek lock receive. i.e., the amount of time that the message is locked by a given receiver so that
            no other receiver receives the same message.
            </summary>
            <remarks>Max value is 5 minutes. Default value is 60 seconds.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.RequiresSession">
            <summary>
            This indicates whether the subscription supports the concept of session. Sessionful-messages follow FIFO ordering.
            </summary>
            <remarks>
            If true, the receiver can only recieve messages using <see cref="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync" />.
            Defaults to false. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Microsoft.Azure.ServiceBus.Message.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages. 
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the subscription is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.EnableDeadLetteringOnMessageExpiration">
            <summary>
            Indicates whether this subscription has dead letter support when a message expires.
            </summary>
            <remarks>If true, the expired messages are moved to dead-letter sub-queue. Default value is false.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.EnableDeadLetteringOnFilterEvaluationExceptions">
            <summary>
            indicates whether messages need to be forwarded to dead-letter sub queue when subscription rule evaluation fails.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.TopicPath">
            <summary>
            Path of the topic under which subscription exists.
            </summary>
            <remarks>Value cannot be null or empty. Value cannot exceed 260 chars. Cannot start or end with a slash. 
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.SubscriptionName">
            <summary>
            Name of the subscription.
            </summary>
            <remarks>Value cannot be null or empty. Value cannot exceed 50 chars.
            Cannot have restricted characters: '@','?','#','*','/','\'</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.MaxDeliveryCount">
            <summary>
            The maximum delivery count of a message before it is dead-lettered.
            </summary>
            <remarks>The delivery count is increased when a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /> mode 
            and didn't complete the message before the message lock expired.
            Default value is 10. Minimum value is 1.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.Status">
            <summary>
            The current status of the subscription (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.ForwardTo">
            <summary>
            The path of the recipient entity to which all the messages sent to the subscription are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive messages from this subscription. The destination entity 
            must be an already existing entity.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.ForwardDeadLetteredMessagesTo">
            <summary>
            The path of the recipient entity to which all the dead-lettered messages of this subscription are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive dead-lettered messages from this subscription. The destination
            entity must already exist.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.UserMetadata">
            <summary>
            Custom metdata that user can associate with the description.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionDescription.UnknownProperties">
            <summary>
            List of properties that were retrieved using GetSubscription but are not understood by this version of client is stored here.
            The list will be sent back when an already retrieved SubscriptionDescription will be used in UpdateSubscription call.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo">
            <summary>
            This provides runtime information of the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo.TopicPath">
            <summary>
            The path of the topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo.SubscriptionName">
            <summary>
            The name of subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo.MessageCount">
            <summary>
            The total number of messages in the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo.MessageCountDetails">
            <summary>
            Message count details of the sub-queues of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo.AccessedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo.CreatedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity was created.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.SubscriptionRuntimeInfo.UpdatedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity description was last updated.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.TopicDescription">
            <summary>
            Represents the metadata description of the topic.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Management.TopicDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of TopicDescription class with the specified relative path.
            </summary>
            <param name="path">Path of the topic relative to the namespace base address.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Microsoft.Azure.ServiceBus.Message.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages. 
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the topic is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.MaxSizeInMB">
            <summary>
            The maximum size of the topic in megabytes, which is the size of memory allocated for the topic.
            </summary>
            <remarks>Default value is 1024.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.RequiresDuplicateDetection">
            <summary>
            This value indicates if the topic requires guard against duplicate messages. If true, duplicate messages having same
            <see cref="P:Microsoft.Azure.ServiceBus.Message.MessageId" /> and sent to topic within duration of <see cref="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.DuplicateDetectionHistoryTimeWindow" />
            will be discarded.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.DuplicateDetectionHistoryTimeWindow">
            <summary>
            The <see cref="T:System.TimeSpan" /> duration of duplicate detection history that is maintained by the service.
            </summary>
            <remarks>
            The default value is 1 minute. Max value is 1 day and minimum is 20 seconds.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.Path">
            <summary>
            Path of the topic relative to the namespace base address.
            </summary>
            <remarks>Max length is 260 chars. Cannot start or end with a slash. 
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.AuthorizationRules">
            <summary>
            The <see cref="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.AuthorizationRules" /> on the topic to control user access at entity level.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.Status">
            <summary>
            The current status of the topic (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.EnablePartitioning">
            <summary>
            Indicates whether the topic is to be partitioned across multiple message brokers.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.SupportOrdering">
            <summary>
            Defines whether ordering needs to be maintained. If true, messages sent to topic will be 
            forwarded to the subscription in order. 
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.UserMetadata">
            <summary>
            Custom metdata that user can associate with the description.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicDescription.UnknownProperties">
            <summary>
            List of properties that were retrieved using GetTopic but are not understood by this version of client is stored here.
            The list will be sent back when an already retrieved TopicDescription will be used in UpdateTopic call. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo">
            <summary>
            This provides runtime information of the topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo.Path">
            <summary>
            The path of the topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo.MessageCountDetails">
            <summary>
            The total number of messages in the topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo.AccessedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo.CreatedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity was created.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo.UpdatedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity description was last updated.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo.SizeInBytes">
            <summary>
            Current size of the entity in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Management.TopicRuntimeInfo.SubscriptionCount">
            <summary>
            Number of subscriptions to the topic.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Message">
            <summary>
            The message object used to communicate and transfer data with Service Bus.
            </summary>
            <remarks>
            The message structure is discussed in detail in the <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads">product documentation.</a>
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Message.DeadLetterReasonHeader">
            <summary>
            User property key representing deadletter reason, when a message is received from a deadletter subqueue of an entity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Message.DeadLetterErrorDescriptionHeader">
            <summary>
            User property key representing detailed error description, when a message is received from a deadletter subqueue of an entity.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.#ctor">
            <summary>
            Creates a new Message
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.#ctor(System.Byte[])">
            <summary>
            Creates a new message from the specified payload.
            </summary>
            <param name="body">The payload of the message in bytes</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.Body">
            <summary>
            Gets or sets the body of the message.
            </summary>
            <remarks>
            The easiest way to create a new message from a string is the following:
            <code>
            message.Body = System.Text.Encoding.UTF8.GetBytes("Message1");
            </code>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.MessageId">
            <summary>
            Gets or sets the MessageId to identify the message.
            </summary>
            <remarks>
               The message identifier is an application-defined value that uniquely identifies the 
               message and its payload. The identifier is a free-form string and can reflect a GUID 
               or an identifier derived from the application context. If enabled, the 
               <a href="https://docs.microsoft.com/azure/service-bus-messaging/duplicate-detection">duplicate detection</a> 
               feature identifies and removes second and further submissions of messages with the 
               same MessageId.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.PartitionKey">
            <summary>Gets or sets a partition key for sending a message to a partitioned entity.</summary>
            <value>The partition key. Maximum length is 128 characters.</value>
            <remarks>
               For <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning">partitioned entities</a>, 
               setting this value enables assigning related messages to the same internal partition, so that submission sequence 
               order is correctly recorded. The partition is chosen by a hash function over this value and cannot be chosen 
               directly. For session-aware entities, the <see cref="P:Microsoft.Azure.ServiceBus.Message.SessionId" /> property overrides this value.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ViaPartitionKey">
            <summary>Gets or sets a partition key for sending a message into an entity via a partitioned transfer queue.</summary>
            <value>The partition key. Maximum length is 128 characters. </value>
            <remarks>
               If a message is sent via a transfer queue in the scope of a transaction, this value selects the 
               transfer queue partition: This is functionally equivalent to <see cref="P:Microsoft.Azure.ServiceBus.Message.PartitionKey" /> and ensures that
               messages are kept together and in order as they are transferred.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via">Transfers and Send Via</a>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SessionId">
            <summary>Gets or sets the session identifier for a session-aware entity.</summary>
            <value>The session identifier. Maximum length is 128 characters.</value>
            <remarks>
               For session-aware entities, this application-defined value specifies the session 
               affiliation of the message. Messages with the same session identifier are subject 
               to summary locking and enable exact in-order processing and demultiplexing. 
               For session-unaware entities, this value is ignored.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-sessions">Message Sessions</a>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ReplyToSessionId">
            <summary>Gets or sets a session identifier augmenting the <see cref="P:Microsoft.Azure.ServiceBus.Message.ReplyTo" /> address.</summary>
            <value>Session identifier. Maximum length is 128 characters.</value>
            <remarks>
               This value augments the ReplyTo information and specifies which SessionId should be set 
               for the reply when sent to the reply entity. See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</a>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ExpiresAtUtc">
            <summary>Gets the date and time in UTC at which the message is set to expire.</summary>
            <value>The message expiration time in UTC. This property is read-only.</value>
            <exception cref="T:System.InvalidOperationException">If the message has not been received. For example if a new message was created but not yet sent and received.</exception>
            <remarks>
             The UTC instant at which the message is marked for removal and no longer available for retrieval 
             from the entity due to expiration. Expiry is controlled by the <see cref="P:Microsoft.Azure.ServiceBus.Message.TimeToLive" /> property 
             and this property is computed from <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.EnqueuedTimeUtc" />+<see cref="P:Microsoft.Azure.ServiceBus.Message.TimeToLive" /></remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.TimeToLive">
            <summary>
            Gets or sets the message’s "time to live" value. 
            </summary>
            <value>The message’s time to live value.</value>
            <remarks>
                This value is the relative duration after which the message expires, starting from the instant 
                 the message has been accepted and stored by the broker, as captured in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.EnqueuedTimeUtc" />. 
                 When not set explicitly, the assumed value is the DefaultTimeToLive for the respective queue or topic. 
                 A message-level <see cref="P:Microsoft.Azure.ServiceBus.Message.TimeToLive" /> value cannot be longer than the entity's DefaultTimeToLive 
                 setting and it is silently adjusted if it does. 
                 See <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-expiration">Expiration</a>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.CorrelationId">
            <summary>Gets or sets the a correlation identifier.</summary>
            <value>Correlation identifier.</value>
            <remarks>
               Allows an application to specify a context for the message for the purposes of correlation, 
               for example reflecting the MessageId of a message that is being replied to.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</a>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.Label">
            <summary>Gets or sets an application specific label.</summary>
            <value>The application specific label</value>
            <remarks>
              This property enables the application to indicate the purpose of the message to the receiver in a standardized 
              fashion, similar to an email subject line. The mapped AMQP property is "subject".
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.To">
            <summary>Gets or sets the "to" address.</summary>
            <value>The "to" address.</value>
            <remarks>
               This property is reserved for future use in routing scenarios and presently ignored by the broker itself. 
                Applications can use this value in rule-driven 
                <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding">auto-forward chaining</a> scenarios to indicate the 
                intended logical destination of the message.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ContentType">
            <summary>Gets or sets the content type descriptor.</summary>
            <value>RFC2045 Content-Type descriptor.</value>
            <remarks>
              Optionally describes the payload of the message, with a descriptor following the format of 
              RFC2045, Section 5, for example "application/json".
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ReplyTo">
            <summary>Gets or sets the address of an entity to send replies to.</summary>
            <value>The reply entity address.</value>
            <remarks>
               This optional and application-defined value is a standard way to express a reply path 
               to the receiver of the message. When a sender expects a reply, it sets the value to the 
               absolute or relative path of the queue or topic it expects the reply to be sent to.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</a>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ScheduledEnqueueTimeUtc">
            <summary>Gets or sets the date and time in UTC at which the message will be enqueued. This
            property returns the time in UTC; when setting the property, the supplied DateTime value must also be in UTC.</summary>
            <value>The scheduled enqueue time in UTC. This value is for delayed message sending.
            It is utilized to delay messages sending to a specific time in the future.</value>
            <remarks> Message enqueuing time does not mean that the message will be sent at the same time. It will get enqueued, but the actual sending time
            depends on the queue's workload and its state.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.Size">
            <summary>
            Gets the total size of the message body in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.UserProperties">
            <summary>
            Gets the "user properties" bag, which can be used for custom message metadata.
            </summary>
            <remarks>
            Only following value types are supported:
            byte, sbyte, char, short, ushort, int, uint, long, ulong, float, double, decimal,
            bool, Guid, string, Uri, DateTime, DateTimeOffset, TimeSpan
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemProperties">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection" />, which is used to store properties that are set by the system.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.ToString">
            <summary>Returns a string that represents the current message.</summary>
            <returns>The string representation of the current message.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.Clone">
            <summary>Clones a message, so that it is possible to send a clone of an already received 
            message as a new message. The system properties of original message 
            are not copied.</summary>
            <returns>A cloned <see cref="T:Microsoft.Azure.ServiceBus.Message" />.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection">
            <summary>
            A collection used to store properties which are set by the Service Bus service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.IsLockTokenSet">
            <summary>
            Specifies whether or not there is a lock token set on the current message.
            </summary>
            <remarks>A lock token will only be specified if the message was received using <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /></remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken">
            <summary>
            Gets the lock token for the current message.
            </summary>
            <remarks>
              The lock token is a reference to the lock that is being held by the broker in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" /> mode. 
              Locks are used to explicitly settle messages as explained in the <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement">product documentation in more detail</a>.
              The token can also be used to pin the lock permanently through the <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-deferral">Deferral API</a> and, with that, take the message out of the 
              regular delivery state flow. This property is read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.IsReceived">
            <summary>Specifies if the message has been obtained from the broker.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.DeliveryCount">
            <summary>
            Get the current delivery count.
            </summary>
            <value>This value starts at 1.</value>
            <remarks>
               Number of deliveries that have been attempted for this message. The count is incremented when a message lock expires, 
               or the message is explicitly abandoned by the receiver. This property is read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockedUntilUtc">
            <summary>Gets the date and time in UTC until which the message will be locked in the queue/subscription.</summary>
            <value>The date and time until which the message will be locked in the queue/subscription.</value>
            <remarks>
            	For messages retrieved under a lock (peek-lock receive mode, not pre-settled) this property reflects the UTC 
                instant until which the message is held locked in the queue/subscription. When the lock expires, the <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.DeliveryCount" /> 
                is incremented and the message is again available for retrieval. This property is read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber">
            <summary>Gets the unique number assigned to a message by Service Bus.</summary>
            <remarks>
                The sequence number is a unique 64-bit integer assigned to a message as it is accepted 
                and stored by the broker and functions as its true identifier. For partitioned entities, 
                the topmost 16 bits reflect the partition identifier. Sequence numbers monotonically increase. 
                They roll over to 0 when the 48-64 bit range is exhausted. This property is read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.DeadLetterSource">
            <summary>
            Gets the name of the queue or subscription that this message was enqueued on, before it was deadlettered.
            </summary>
            <remarks>
            	Only set in messages that have been dead-lettered and subsequently auto-forwarded from the dead-letter queue 
                to another entity. Indicates the entity in which the message was dead-lettered. This property is read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.EnqueuedSequenceNumber">
            <summary>Gets or sets the original sequence number of the message.</summary>
            <value>The enqueued sequence number of the message.</value>
            <remarks>
            For messages that have been auto-forwarded, this property reflects the sequence number 
            that had first been assigned to the message at its original point of submission. This property is read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.EnqueuedTimeUtc">
            <summary>Gets or sets the date and time of the sent time in UTC.</summary>
            <value>The enqueue time in UTC. </value>
            <remarks>
               The UTC instant at which the message has been accepted and stored in the entity. 
               This value can be used as an authoritative and neutral arrival time indicator when 
               the receiver does not want to trust the sender's clock. This property is read-only.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions">
            <summary>Provides options associated with message pump processing using
            <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)" /> and
            <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)" />.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.MessageHandlerOptions.#ctor(System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions" /> class.
            Default Values:
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxConcurrentCalls" /> = 1
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.AutoComplete" /> = true
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.ReceiveTimeOut" /> = 1 minute
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxAutoRenewDuration" /> = 5 minutes
            </summary>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.ExceptionReceivedHandler">
            <summary>Occurs when an exception is received. Enables you to be notified of any errors encountered by the message pump.
            When errors are received calls will automatically be retried, so this is informational. </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxConcurrentCalls">
            <summary>Gets or sets the maximum number of concurrent calls to the callback the message pump should initiate.</summary>
            <value>The maximum number of concurrent calls to the callback.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.AutoComplete">
            <summary>Gets or sets a value that indicates whether the message-pump should call
            <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.CompleteAsync(System.String)" /> or
            <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.CompleteAsync(System.String)" /> on messages after the callback has completed processing.</summary>
            <value>true to complete the message processing automatically on successful execution of the operation; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxAutoRenewDuration">
            <summary>Gets or sets the maximum duration within which the lock will be renewed automatically. This
            value should be greater than the longest message lock duration; for example, the LockDuration Property. </summary>
            <value>The maximum duration during which locks are automatically renewed.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessageLockLostException">
            <summary>
            The exception that is thrown when the lock on the message is lost.  Callers should call Receive and process the message again.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessageNotFoundException">
            <summary>
            The exception that is thrown when the requested message is not found.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageSession.LockedUntilUtc">
            <summary>
            Gets the time that the session identified by <see cref="P:Microsoft.Azure.ServiceBus.MessageSession.SessionId" /> is locked until for this client.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageSession.SessionId">
            <summary>
            Gets the SessionId.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.MessageSession.ThrowIfClosed">
            <summary>
            Throw an OperationCanceledException if the object is Closing.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessageSizeExceededException">
            <summary>
            The exception that is thrown when the message size exceeds the limit.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessagingEntityDisabledException">
            <summary>
            The exception that is thrown when the Messaging Entity is disabled. Enable the entity again using Portal.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">
            <summary>
            The exception that is thrown when the Messaging Entity is not found.  Verify Entity Exists.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.NoRetry">
            <summary>
            A retry policy, which does not actually retry.
            </summary>
            <remarks>Use this if you want all Service Bus exceptions to be handled by user code.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.NoRetry.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)">
            <summary>
            Called to see if a retry should be performed.
            </summary>
            <param name="remainingTime">The remaining time before the timeout expires.</param>
            <param name="currentRetryCount">The number of attempts that have been processed.</param>
            <param name="retryInterval">The amount of time to delay before retry.</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.AzureActiveDirectoryTokenProvider">
            <summary>
            Represents the Azure Active Directory token provider for the Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.AzureActiveDirectoryTokenProvider.GetTokenAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /> for the given audience and duration.
            </summary>
            <param name="appliesTo">The URI which the access token applies to</param>
            <param name="timeout">The time span that specifies the timeout value for the message that gets the security token</param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.ITokenProvider">
            <summary>
            Provides interface definition of a token provider.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.ITokenProvider.GetTokenAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" />.
            </summary>
            <param name="appliesTo">The URI which the access token applies to</param>
            <param name="timeout">The time span that specifies the timeout value for the message that gets the security token</param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.JsonSecurityToken">
            <summary>
            Extends SecurityToken for JWT specific properties
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.JsonSecurityToken.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.JsonSecurityToken" /> class.
            </summary>
            <param name="rawToken">Raw JSON Web Token string</param>
            <param name="audience">The audience</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.ManagedServiceIdentityTokenProvider">
            <summary>
            Represents the Azure Active Directory token provider for Azure Managed Service Identity integration.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.ManagedServiceIdentityTokenProvider.GetTokenAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /> for the given audience and duration.
            </summary>
            <param name="appliesTo">The URI which the access token applies to</param>
            <param name="timeout">The time span that specifies the timeout value for the message that gets the security token</param>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken">
            <summary>
            Provides information about a security token such as audience, expiry time, and the string token value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.token">
            <summary>
            Token literal
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.expiresAtUtc">
            <summary>
            Expiry date-time
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.audience">
            <summary>
            Token audience
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.tokenType">
            <summary>
            Token type
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.#ctor(System.String,System.DateTime,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /> class.
            </summary>
            <param name="tokenString">The token</param>
            <param name="expiresAtUtc">The expiration time</param>
            <param name="audience">The audience</param>
            <param name="tokenType">The type of the token</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.Audience">
            <summary>
            Gets the audience of this token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.ExpiresAtUtc">
            <summary>
            Gets the expiration time of this token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.TokenValue">
            <summary>
            Gets the actual token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.TokenType">
            <summary>
            Gets the token type.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureToken">
            <summary>
            A WCF SecurityToken that wraps a Shared Access Signature
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureToken.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureToken" /> class.
            </summary>
            <param name="tokenString">The token</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider">
            <summary>
            The SharedAccessSignatureTokenProvider generates tokens using a shared access key or existing signature.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.#ctor(System.String,System.String,System.Func{System.String,System.Byte[]},System.TimeSpan,Microsoft.Azure.ServiceBus.Primitives.TokenScope)">
            <summary></summary>
            <param name="keyName"></param>
            <param name="sharedAccessKey"></param>
            <param name="customKeyEncoder"></param>
            <param name="tokenTimeToLive"></param>
            <param name="tokenScope"></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.GetTokenAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /> for the given audience and duration.
            </summary>
            <param name="appliesTo">The URI which the access token applies to. If <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider" />
            is initiated with SASKeyName and SASKey, the token will be generated for this uri. If initiated with SASToken, then 
            the value is ignored.</param>
            <param name="timeout">The timeout value for how long it takes to get the security token (not the token time to live). 
            For SAS token, no asynchronous operation takes place and hence this timeout is ignored.</param>
            <remarks>This parameter <paramref name="timeout" /> is here for compatibility, but is not currently used.</remarks>
            <returns><see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.BuildSignature(System.String)">
            <summary></summary>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.StringUtility.FormatForUser(System.String,System.Object[])">
            <summary>
            Formats a string+parameters using CurrentCulture.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.StringUtility.FormatInvariant(System.String,System.Object)">
            <summary>
            Formats a string+parameter using InvariantCulture.  This overload avoids allocating an array when there's only one replacement parameter
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.StringUtility.FormatInvariant(System.String,System.Object[])">
            <summary>
            Formats a string+parameters using InvariantCulture.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider">
            <summary>
            This abstract base class can be extended to implement additional token providers.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String)">
            <summary>
            Construct a TokenProvider based on a sharedAccessSignature.
            </summary>
            <param name="sharedAccessSignature">The shared access signature</param>
            <returns>A TokenProvider initialized with the shared access signature</returns>
            <remarks><see cref="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.GetTokenAsync(System.String,System.TimeSpan)" /> parameters will not be used 
            to manipulate target URL and token TTL.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <returns>A TokenProvider initialized with the provided RuleId and Password</returns>
            <remarks>Default token TTL is 1 hour and token scope is at entity level.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String,System.TimeSpan)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <param name="tokenTimeToLive">The token time to live</param>
            <returns>A TokenProvider initialized with the provided keyName and key.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.TokenScope)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <param name="tokenScope">The tokenScope of tokens to request.</param>
            <returns>A TokenProvider initialized with the provided keyName and key</returns>
            <remarks>Default token TTL is 1 hour.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String,System.TimeSpan,Microsoft.Azure.ServiceBus.Primitives.TokenScope)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <param name="tokenTimeToLive">The token time to live</param> 
            <param name="tokenScope">The tokenScope of tokens to request.</param>
            <returns>A TokenProvider initialized with the provided RuleId and Password</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateAadTokenProvider(Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>Creates an Azure Active Directory token provider.</summary>
            <param name="authContext">AuthenticationContext for AAD.</param>
            <param name="clientCredential">The app credential.</param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> for returning Json web token.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateAadTokenProvider(Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext,System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.IPlatformParameters,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>Creates an Azure Active Directory token provider.</summary>
            <param name="authContext">AuthenticationContext for AAD.</param>
            <param name="clientId">ClientId for AAD.</param>
            <param name="redirectUri">The redirectUri on Client App.</param>
            <param name="platformParameters">Platform parameters</param>
            <param name="userIdentifier">User Identifier</param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> for returning Json web token.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateAadTokenProvider(Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate)">
            <summary>Creates an Azure Active Directory token provider.</summary>
            <param name="authContext">AuthenticationContext for AAD.</param>
            <param name="clientAssertionCertificate">The client assertion certificate credential.</param>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> for returning Json web token.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateManagedServiceIdentityTokenProvider">
            <summary>Creates Azure Managed Service Identity token provider.</summary>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider" /> for returning Json web token.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.GetTokenAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" /> for the given audience and duration.
            </summary>
            <param name="appliesTo">The URI which the access token applies to</param>
            <param name="timeout">The timeout value for how long it takes to get the security token (not the token time to live).</param>
            <remarks>This parameter <paramref name="timeout" /> is here for compatibility, but is not currently used.</remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.TokenProviderAdapter">
            <summary>
            Provides an adapter from TokenProvider to ICbsTokenProvider for AMQP CBS usage.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.TokenScope">
            <summary>
            A enum representing the scope of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken" />.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.TokenScope.Namespace">
            <summary>
            The namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.TokenScope.Entity">
            <summary>
            The entity.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.QueueClient">
             <summary>
             QueueClient can be used for all basic interactions with a Service Bus Queue.
             </summary>
             <example>
             Create a new QueueClient
             <code>
             IQueueClient queueClient = new QueueClient(
                 namespaceConnectionString,
                 queueName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
            
             Send a message to the queue:
             <code>
             byte[] data = GetData();
             await queueClient.SendAsync(data);
             </code>
            
             Register a message handler which will be invoked every time a message is received.
             <code>
             queueClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the queueClient is opened in ReceiveMode.PeekLock mode.
                        await queueClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageSender" /> or <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" /> for advanced set of functionality.
             It uses AMQP protocol for communicating with servicebus.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" /> to perform operations on a queue.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having namespace and queue information.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the queue, which is opened during the first send/receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" /> to perform operations on a queue.
            </summary>
            <param name="connectionString">Namespace connection string. Must not contain queue information.</param>
            <param name="entityPath">Name of the queue</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the queue, which is opened during the first send/receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider,Microsoft.Azure.ServiceBus.TransportType,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new instance of the Queue client using the specified endpoint, entity path, and token provider.
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="entityPath">Queue path.</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
            <param name="transportType">Transport type.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the queue, which is opened during the first send/receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnection,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new instance of the Queue client on a given <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ServiceBusConnection" />
            </summary>
            <param name="serviceBusConnection">Connection object to the service bus namespace.</param>
            <param name="entityPath">Queue path.</param>
            <param name="receiveMode">Mode of receive of messages. Default to <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.QueueName">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> for the QueueClient.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.Path">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks>
            <para>
            When Prefetch is enabled, the client will quietly acquire more messages, up to the PrefetchCount limit, than what the application
            immediately asks for. The message pump will therefore acquire a message for immediate consumption
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background.
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the
            buffer and then wait or block as expected.
            </para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this QueueClient.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using its lock token. This will delete the message from the queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            This operation can only be performed on messages that were received by this client.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.AbandonAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            Abandoning a message will increase the delivery count on the message.
            This operation can only be performed on messages that were received by this client.
            </remarks>
            This operation can only be performed on messages that were received by this client.
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.DeadLetterAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="propertiesToModify">The properties of the message to modify while moving to sub-queue.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.DeadLetterAsync(System.String,System.String,System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="deadLetterReason">The reason for deadlettering the message.</param>
            <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speed up the receive rate.
            Use <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)" /> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions" /> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speed up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speed up the receive rate.
            Use <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" /> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>Enable prefetch to speed up the receive rate. </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus at a later time.
            </summary>
            <param name="scheduleEnqueueTimeUtc">The UTC time at which the message should be available for processing</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber" /> of the message to be cancelled.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used with this queue client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.QuotaExceededException">
            <summary>
            The exception that is thrown when the Quota (Entity Max Size or other Connection etc) allocated to the Entity has exceeded.  Callers should check the
            error message to see which of the Quota exceeded and take appropriate action.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ReceiveMode">
            <summary>
            Specifies the behavior of the receiver.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock">
            <summary>Allows a message to be received, and only deleted from Service Bus when <see cref="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.CompleteAsync(System.String)" /> is called.</summary>
            <remarks>This is the default value for <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" />, and should be used for guaranteed delivery.</remarks>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ReceiveMode.ReceiveAndDelete">
            <summary>ReceiveAndDelete will delete the message from Service Bus as soon as the message is delivered.</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.AmqpFieldSessionId">
            <summary>
              Looks up a localized string similar to Failed to retreive session ID from broker. Please retry..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.AmqpMessageSizeExceeded">
            <summary>
              Looks up a localized string similar to The received message (delivery-id:{0}, size:{1} bytes) exceeds the limit ({2} bytes) currently allowed on the link..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ArgumentMustBePositive">
            <summary>
              Looks up a localized string similar to The value of the argument {0} must be positive..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ArgumentNullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to The argument {0} is null or white space..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ArgumentStringTooBig">
            <summary>
              Looks up a localized string similar to The argument '{0}' cannot exceed {1} characters..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.BrokeredMessageListIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to There are no brokeredMessages supplied. Please make sure input messages are not empty..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.CannotSendAnEmptyMessage">
            <summary>
              Looks up a localized string similar to Sending empty {0} is not a valid operation..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.CharacterReservedForUriScheme">
            <summary>
              Looks up a localized string similar to '{0}' contains character '{1}' which is not allowed because it is reserved in the Uri scheme..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.DefaultServerBusyException">
            <summary>
              Looks up a localized string similar to This request has been blocked because the entity or namespace is being throttled. Please retry the operation, and if condition continues, please slow down your rate of request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.EntityNameLengthExceedsLimit">
            <summary>
              Looks up a localized string similar to The entity path/name '{0}' exceeds the '{1}' character limit..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ExponentialRetryBackoffRange">
            <summary>
              Looks up a localized string similar to The minimum back off period '{0}' cannot exceed the maximum back off period of '{1}'..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.FailedToSerializeUnsupportedType">
            <summary>
              Looks up a localized string similar to Serialization operation failed due to unsupported type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.InvalidAmqpMessageProperty">
            <summary>
              Looks up a localized string similar to {0} is not a supported user property type..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.InvalidCharacterInEntityName">
            <summary>
              Looks up a localized string similar to The entity name or path contains an invalid character '{0}'. The supplied value is '{1}'..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.InvalidEncoding">
            <summary>
              Looks up a localized string similar to The string has an invalid encoding format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.MaxConcurrentCallsMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The specified value '{0}' is invalid. "maxConcurrentCalls" must be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.MessageHandlerAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A message handler has already been registered..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.MessageLockLost">
            <summary>
              Looks up a localized string similar to The lock supplied is invalid. Either the lock expired, or the message has already been removed from the queue, or was received by a different receiver instance..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.NotSupportedPropertyType">
            <summary>
              Looks up a localized string similar to '{0}' is not a supported type..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.PeekLockModeRequired">
            <summary>
              Looks up a localized string similar to This operation is only supported for a message receiver in 'PeekLock' receive mode..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.PluginAlreadyRegistered">
            <summary>
              Looks up a localized string similar to The {0} plugin has already been registered..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.RuleFilterNotSupported">
            <summary>
              Looks up a localized string similar to Provided rule filter {0} is not supported. Supported values are: {1}, {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SessionFilterMissing">
            <summary>
              Looks up a localized string similar to Failed to retreive session filter from broker. Please retry..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SessionHandlerAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A session handler has already been registered..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SessionLockExpiredOnMessageSession">
            <summary>
              Looks up a localized string similar to The session lock has expired on the MessageSession. Accept a new MessageSession..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SqlFilterActionStatmentTooLong">
            <summary>
              Looks up a localized string similar to The length of the filter action statement is {0}, which exceeds the maximum length of {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SqlFilterStatmentTooLong">
            <summary>
              Looks up a localized string similar to The length of the filter statement is {0}, which exceeds the maximum length of {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TimeoutMustBeNonNegative">
            <summary>
              Looks up a localized string similar to Argument {0} must be a non-negative timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TimeoutMustBePositive">
            <summary>
              Looks up a localized string similar to Argument {0} must be a positive timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TimeoutMustBePositiveNonZero">
            <summary>
              Looks up a localized string similar to Argument {0} must be a positive non-zero timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TokenMissingAudience">
            <summary>
              Looks up a localized string similar to The provided token does not specify the 'Audience' value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TokenMissingExpiresOn">
            <summary>
              Looks up a localized string similar to The provided token does not specify the 'ExpiresOn' value..
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RetryExponential">
            <summary>
            RetryPolicy implementation where the delay between retries will grow in a staggered exponential manner.
            RetryIntervals will be computed using a retryFactor which is a function of deltaBackOff (MaximumBackoff - MinimumBackoff) and MaximumRetryCount
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryExponential.#ctor(System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Returns a new RetryExponential retry policy object.
            </summary>
            <param name="minimumBackoff">Minimum backoff interval.</param>
            <param name="maximumBackoff">Maximum backoff interval.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.MinimalBackoff">
            <summary>
            Minimum backoff interval.
            </summary>
            <value>The minimum backoff interval.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.MaximumBackoff">
            <summary>
            Gets or sets the maximum backoff interval.
            </summary>
            <value>The maximum backoff interval.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.DeltaBackoff">
            <summary>
            Gets or sets the backoff interval associated with the retry.
            </summary>
            <value>The backoff interval associated with the retry.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.MaxRetryCount">
            <summary>
            Gets or sets the maximum number of allowed retries.
            </summary>
            <value>The maximum number of allowed retries.</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryExponential.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)">
            <summary>
            Called to see if a retry should be performed.
            </summary>
            <param name="remainingTime">The remaining time before the timeout expires.</param>
            <param name="currentRetryCount">The number of attempts that have been processed.</param>
            <param name="retryInterval">The amount of time to delay before retry.</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RetryPolicy">
            <summary>
            Represents an abstraction for retrying messaging operations. Users should not
            implement this class, and instead should use one of the provided implementations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default">
            <summary>
            Returns the default retry policy, <see cref="T:Microsoft.Azure.ServiceBus.RetryExponential" />.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryPolicy.NoRetry">
            <summary>
            Returns a <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.NoRetry" /> retry policy.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryPolicy.IsServerBusy">
            <summary>
            Determines whether or not the server returned a busy error.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryPolicy.ServerBusyExceptionMessage">
            <summary>
            Gets the exception message when a server busy error is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryPolicy.RunOperation(System.Func{System.Threading.Tasks.Task},System.TimeSpan)">
            <summary>
            Runs a <see cref="T:System.Func`2" />, using the current RetryPolicy.
            </summary>
            <param name="operation">A <see cref="T:System.Func`2" /> to be executed.</param>
            <param name="operationTimeout">The timeout for the entire operation.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryPolicy.IsRetryableException(System.Exception)">
            <summary>
            Determines whether or not the exception can be retried.
            </summary>
            <returns>A bool indicating whether or not the operation can be retried.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServerBusyException">
            <summary>
            The exception that is thrown when a server is busy.  Callers should wait a while and retry the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusCommunicationException">
            <summary>
            Exception for signaling general communication errors related to messaging operations.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusConnection">
            <summary>
            Connection object to service bus namespace
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder)">
            <summary>
            Creates a new connection to service bus.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having namespace information.</param>
            <remarks>It is the responsibility of the user to close the connection after use through <see cref="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.CloseAsync" /></remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.#ctor(System.String)">
            <summary>
            Creates a new connection to service bus.
            </summary>
            <param name="namespaceConnectionString">Namespace connection string</param>
            <remarks>It is the responsibility of the user to close the connection after use through <see cref="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.CloseAsync" /></remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.#ctor(System.String,System.TimeSpan,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new connection to service bus.
            </summary>
            <param name="namespaceConnectionString">Namespace connection string.</param>
            <param name="operationTimeout">Duration after which individual operations will timeout.</param>
            <param name="retryPolicy">Retry policy for operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>It is the responsibility of the user to close the connection after use through <see cref="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.CloseAsync" /></remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.#ctor(System.String,Microsoft.Azure.ServiceBus.TransportType,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new connection to service bus.
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="transportType">Transport type.</param>
            <param name="retryPolicy">Retry policy for operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnection.Endpoint">
            <summary>
            Fully qualified domain name for Service Bus.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnection.OperationTimeout">
            <summary>
            OperationTimeout is applied in erroneous situations to notify the caller about the relevant <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusException" />
            </summary>
            <remarks>Defaults to 1 minute.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnection.RetryPolicy">
            <summary>
            Retry policy for operations performed on the connection.
            </summary>
            <remarks>Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnection.TransportType">
            <summary>
            Get the transport type from the connection string.
            <remarks>Available options: Amqp and AmqpWebSockets.</remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnection.TokenProvider">
            <summary>
            Token provider for authentication. <see cref="P:Microsoft.Azure.ServiceBus.ServiceBusConnection.TokenProvider" />
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnection.IsClosedOrClosing">
            <summary>
            Returns true if the Service Bus Connection is closed or closing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.ThrowIfClosed">
            <summary>
            Throw an OperationCanceledException if the object is Closing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnection.CloseAsync">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder">
            <summary>
            Used to generate Service Bus connection strings.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />.
            </summary>
            <param name="connectionString">Connection string for namespace or the entity.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />.
            </summary>
            <example>
            <code>
            var connectionStringBuilder = new ServiceBusConnectionStringBuilder(
                "contoso.servicebus.windows.net",
                "myQueue",
                "RootManageSharedAccessKey",
                "&amp;lt;sharedAccessKey&amp;gt;
            );
            </code>
            </example>
            <param name="endpoint">Fully qualified endpoint.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />.
            </summary>
            <example>
            <code>
            var connectionStringBuilder = new ServiceBusConnectionStringBuilder(
                "contoso.servicebus.windows.net",
                "myQueue",
                "{ ... SAS token ... }"
            );
            </code>
            </example>
            <param name="endpoint">Fully qualified endpoint.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor(System.String,System.String,System.String,System.String,Microsoft.Azure.ServiceBus.TransportType)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />.
            </summary>
            <example>
            <code>
            var connectionStringBuilder = new ServiceBusConnectionStringBuilder(
                "contoso.servicebus.windows.net",
                "myQueue",
                "RootManageSharedAccessKey",
                "&amp;lt;sharedAccessKey&amp;gt;,
                TransportType.Amqp
            );
            </code>
            </example>
            <param name="endpoint">Fully qualified endpoint.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor(System.String,System.String,System.String,Microsoft.Azure.ServiceBus.TransportType)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />.
            </summary>
            <example>
            <code>
            var connectionStringBuilder = new ServiceBusConnectionStringBuilder(
                "contoso.servicebus.windows.net",
                "myQueue",
                "{ ... SAS token ... }",
                TransportType.Amqp
            );
            </code>
            </example>
            <param name="endpoint">Fully qualified endpoint.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.Endpoint">
            <summary>
            Fully qualified domain name of the endpoint.
            </summary>
            <example>
            <code>this.Endpoint = contoso.servicebus.windows.net</code>
            </example>
            <exception cref="T:System.ArgumentException">Throws when endpoint is not fully qualified endpoint.</exception>
            <exception cref="T:System.UriFormatException">Throws when the hostname cannot be parsed</exception>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath">
            <summary>
            Get the entity path value from the connection string
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.SasKeyName">
            <summary>
            Get the shared access policy owner name from the connection string
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.SasKey">
            <summary>
            Get the shared access policy key value from the connection string
            </summary>
            <value>Shared Access Signature key</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.SasToken">
            <summary>
            Get the shared access signature token from the connection string
            </summary>
            <value>Shared Access Signature token</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.TransportType">
            <summary>
            Get the transport type from the connection string
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.GetNamespaceConnectionString">
            <summary>
            Returns an interoperable connection string that can be used to connect to ServiceBus Namespace
            </summary>
            <returns>Namespace connection string</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.GetEntityConnectionString">
            <summary>
            Returns an interoperable connection string that can be used to connect to the given ServiceBus Entity
            </summary>
            <returns>Entity connection string</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.ToString">
            <summary>
            Returns an interoperable connection string that can be used to connect to ServiceBus Namespace
            </summary>
            <returns>The connection string</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusException">
            <summary>
            Base Exception for various Service Bus errors.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean,System.String)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
            <param name="message">The detailed message exception.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean,System.Exception)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean,System.String,System.Exception)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
            <param name="message">The detailed message exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusException.Message">
            <summary>
            Gets the message as a formatted string.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusException.IsTransient">
            <summary>
            A boolean indicating if the exception is a transient error or not.
            </summary>
            <value>returns true when user can retry the operation that generated the exception without additional intervention.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusException.ServiceBusNamespace">
            <summary>
            Gets the Service Bus namespace from which the exception occurred, if available.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">
            <summary>
            The exception that is thrown when a time out is encountered.  Callers retry the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SessionCannotBeLockedException">
            <summary>
            The exception that is thrown when a session cannot be locked.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SessionClient">
             <summary>
             A session client can be used to accept session objects which can be used to interact with all messages with the same sessionId.
             </summary>
             <remarks>
             You can accept any session or a given session (identified by <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" /> using a session client.
             Once you accept a session, you can use it as a <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" /> which receives only messages having the same session id.
             See <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> for usage of session object.
             This uses AMQP protocol to communicate with the service.
             </remarks>
             <example>
             To create a new SessionClient
             <code>
             ISessionClient sessionClient = new SessionClient(
                 namespaceConnectionString,
                 queueName,
                 ReceiveMode.PeekLock);
             </code>
            
             To receive a session object for a given sessionId
             <code>
             IMessageSession session = await sessionClient.AcceptMessageSessionAsync(sessionId);
             </code>
            
             To receive any session
             <code>
             IMessageSession session = await sessionClient.AcceptMessageSessionAsync();
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.ServiceBus.IMessageSession" />
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new SessionClient from a <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" />
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having entity level connection details.</param>
            <param name="receiveMode">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with ServiceBus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.PrefetchCount" /> that specifies the upper limit of messages the session object
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is used for all the sessions objects accepted using this client.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new SessionClient from a specified connection string and entity path.
            </summary>
            <param name="connectionString">Namespace connection string used to communicate with Service Bus. Must not contain entity details.</param>
            <param name="entityPath">The path of the entity for this receiver. For Queues this will be the name, but for Subscriptions this will be the full path.</param>
            <param name="receiveMode">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with ServiceBus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.PrefetchCount" /> that specifies the upper limit of messages the session object
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is used for all the sessions objects accepted using this client.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider,Microsoft.Azure.ServiceBus.TransportType,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new SessionClient from a specified endpoint, entity path, and token provider.
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="entityPath">Queue path.</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
            <param name="transportType">Transport type.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.PrefetchCount" /> that specifies the upper limit of messages this receiver
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnection,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new SessionClient on a given <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.ServiceBusConnection" />
            </summary>
            <param name="serviceBusConnection">Connection object to the service bus namespace.</param>
            <param name="entityPath">The path of the entity for this receiver. For Queues this will be the name, but for Subscriptions this will be the full path.</param>
            <param name="receiveMode">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy" /> that will be used when communicating with ServiceBus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.PrefetchCount" /> that specifies the upper limit of messages the session object
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.EntityPath">
            <summary>
            Gets the path of the entity. This is either the name of the queue, or the full path of the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.Path">
            <summary>
            Gets the path of the entity. This is either the name of the queue, or the full path of the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync(System.TimeSpan)">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <param name="operationTimeout">Amount of time for which the call should wait to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync(System.String)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId" /> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <param name="operationTimeout">Amount of time for which the call should wait to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient" /> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession" /> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used with this receiver.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> of the plugin to be unregistered.</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SessionHandlerOptions">
            <summary>Provides options associated with session pump processing using
            <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" /> and
            <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" />.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionHandlerOptions.#ctor(System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.SessionHandlerOptions" /> class.
            Default Values:
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxConcurrentSessions" /> = 2000
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.AutoComplete" /> = true
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MessageWaitTimeout" /> = 1 minute
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxAutoRenewDuration" /> = 5 minutes
            </summary>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.ExceptionReceivedHandler">
            <summary>Occurs when an exception is received. Enables you to be notified of any errors encountered by the session pump.
            When errors are received calls will automatically be retried, so this is informational. </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxAutoRenewDuration">
            <summary>Gets or sets the duration for which the session lock will be renewed automatically.</summary>
            <value>The duration for which the session renew its state.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MessageWaitTimeout">
            <summary>Gets or sets the time to wait for receiving a message.</summary>
            <value>The time to wait for receiving the message.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxConcurrentSessions">
            <summary>Gets or sets the maximum number of existing sessions that the User wants to handle concurrently.</summary>
            <value>The maximum number of sessions that the User wants to handle concurrently.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.AutoComplete">
            <summary>Gets or sets whether the autocomplete option of the session handler is enabled.</summary>
            <value>true if the autocomplete option of the session handler is enabled; otherwise, false.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SessionLockLostException">
            <summary>
            The exception that is thrown when the lock on the Session has expired.  Callers should receive the Session again.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SubscriptionClient">
             <summary>
             SubscriptionClient can be used for all basic interactions with a Service Bus Subscription.
             </summary>
             <example>
             Create a new SubscriptionClient
             <code>
             ISubscriptionClient subscriptionClient = new SubscriptionClient(
                 namespaceConnectionString,
                 topicName,
                 subscriptionName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
            
             Register a message handler which will be invoked every time a message is received.
             <code>
             subscriptionClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the subscriptionClient is opened in ReceiveMode.PeekLock mode.
                        await subscriptionClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>It uses AMQP protocol for communicating with service bus. Use <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver" /> for advanced set of functionality.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" /> to perform operations on a subscription.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having namespace and topic information.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for subscription operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the subscription, which is opened during the first receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.#ctor(System.String,System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" /> to perform operations on a subscription.
            </summary>
            <param name="connectionString">Namespace connection string. Must not contain topic or subscription information.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for subscription operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the subscription, which is opened during the first receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.#ctor(System.String,System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider,Microsoft.Azure.ServiceBus.TransportType,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new instance of the Subscription client using the specified endpoint, entity path, and token provider.
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="topicPath">Topic path.</param>
            <param name="subscriptionName">Subscription name.</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
            <param name="transportType">Transport type.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for subscription operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the subscription, which is opened during the first receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnection,System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new instance of the Subscription client on a given <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ServiceBusConnection" />
            </summary>
            <param name="serviceBusConnection">Connection object to the service bus namespace.</param>
            <param name="topicPath">Topic path.</param>
            <param name="subscriptionName">Subscription name.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" />.PeekLock.</param>
            <param name="retryPolicy">Retry policy for subscription operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.TopicPath">
            <summary>
            Gets the path of the corresponding topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.Path">
            <summary>
            Gets the formatted path of the subscription client.
            </summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubscriptionPath(System.String,System.String)" />
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.SubscriptionName">
            <summary>
            Gets the name of the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" /> for the SubscriptionClient.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks>
            <para>
            When Prefetch is enabled, the client will quietly acquire more messages, up to the PrefetchCount limit, than what the application
            immediately asks for. The message pump will therefore acquire a message for immediate consumption
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background.
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the
            buffer and then wait or block as expected.
            </para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using its lock token. This will delete the message from the subscription.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            This operation can only be performed on messages that were received by this client.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.AbandonAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message" /> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            Abandoning a message will increase the delivery count on the message.
            This operation can only be performed on messages that were received by this client.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.DeadLetterAsync(System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter sub-queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" /> or <see cref="T:Microsoft.Azure.ServiceBus.ISubscriptionClient" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this client.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.DeadLetterAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="propertiesToModify">The properties of the message to modify while moving to sub-queue.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.DeadLetterAsync(System.String,System.String,System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <param name="deadLetterReason">The reason for deadlettering the message.</param>
            <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken" />,
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode" /> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock" />.
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver" />, with the corresponding path.
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)" /> to help with this.
            This operation can only be performed on messages that were received by this receiver.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speed up the receive rate.
            Use <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)" /> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3" />) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3" /> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions" /> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speed up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2" /> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> contains contextual information regarding the exception.</param>
            <remarks>  Enable prefetch to speed up the receive rate.
            Use <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" /> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4" />) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4" /> that processes messages.
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession" /> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message" /></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>Enable prefetch to speed up the receive rate. </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.AddRuleAsync(System.String,Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="filter">The filter expression against which messages will be matched.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that decides which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter" /> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName" /> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription.
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            Max allowed length of rule name is 50 chars.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.AddRuleAsync(Microsoft.Azure.ServiceBus.RuleDescription)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="description">The rule description that provides the rule to add.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that decides which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter" /> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName" /> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription.
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RemoveRuleAsync(System.String)">
            <summary>
            Removes the rule on the subscription identified by <paramref name="ruleName" />.
            </summary>
            <returns>A task instance that represents the asynchronous remove rule operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.GetRulesAsync">
            <summary>
            Get all rules associated with the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this SubscriptionClient.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used for receiving messages from Service Bus.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to register</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.TopicClient">
             <summary>
             TopicClient can be used for all basic interactions with a Service Bus topic.
             </summary>
             <example>
             Create a new TopicClient
             <code>
             ITopicClient topicClient = new TopicClient(
                 namespaceConnectionString,
                 topicName,
                 RetryExponential);
             </code>
            
             Send a message to the topic:
             <code>
             byte[] data = GetData();
             await topicClient.SendAsync(data);
             </code>
             </example>
             <remarks>It uses AMQP protocol for communicating with servicebus.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.TopicClient" /> to perform operations on a topic.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder" /> having namespace and topic information.</param>
            <param name="retryPolicy">Retry policy for topic operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the topic, which is opened during the first send operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.TopicClient" /> to perform operations on a topic.
            </summary>
            <param name="connectionString">Namespace connection string. Must not contain topic information.</param>
            <param name="entityPath">Path to the topic</param>
            <param name="retryPolicy">Retry policy for topic operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the topic, which is opened during the first send operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.ITokenProvider,Microsoft.Azure.ServiceBus.TransportType,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new instance of the Topic client using the specified endpoint, entity path, and token provider.
            </summary>
            <param name="endpoint">Fully qualified domain name for Service Bus. Most likely, {yournamespace}.servicebus.windows.net</param>
            <param name="entityPath">Topic path.</param>
            <param name="tokenProvider">Token provider which will generate security tokens for authorization.</param>
            <param name="transportType">Transport type.</param>
            <param name="retryPolicy">Retry policy for topic operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
            <remarks>Creates a new connection to the topic, which is opened during the first send operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnection,System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new instance of the Topic client on a given <see cref="P:Microsoft.Azure.ServiceBus.TopicClient.ServiceBusConnection" />
            </summary>
            <param name="serviceBusConnection">Connection object to the service bus namespace.</param>
            <param name="entityPath">Topic path.</param>
            <param name="retryPolicy">Retry policy for topic operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default" /></param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.TopicName">
            <summary>
            Gets the name of the topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.Path">
            <summary>
            Gets the name of the topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.ServiceBusConnection">
            <summary>
            Connection object to the service bus namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus at a later time.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that needs to be scheduled.</param>
            <param name="scheduleEnqueueTimeUtc">The UTC time at which the message should be available for processing.</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber" /> of the message to be cancelled.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this TopicClient.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" /> to be used with this topic client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin" />.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name" /> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.TransportType">
            <summary>
            AMQP Transport Type
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.TransportType.Amqp">
            <summary>
            Uses AMQP over TCP.
            <remarks>This is the default value. It runs on port 5671. </remarks>
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.TransportType.AmqpWebSockets">
            <summary>
            Uses AMQP over WebSockets
            </summary>
            <remarks>This runs on port 443 with wss URI scheme. This could be used in scenarios where traffic to port 5671 is blocked. 
            To setup a proxy connection, please configure system default proxy. Proxy currently is supported only in  .NET 4.5.1 and higher or .NET Core 2.1 and higher.</remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.UnauthorizedException">
            <summary>
            The exception that is thrown when user doesn't have access to the entity.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>p1fK18vg9f6ZVApLW0tdO7j1c7Q=</DigestValue></Reference></SignedInfo><SignatureValue>KLzBP5AeXBpLWsUA0128DXFTjMzwYqlBSDnomINEsqNr5vrmc2Lx+0OGFU8ULGj2CsK12sxHQK4MaE+9El5yWZsyuUnnFAubXCwdzdIZNe2opN1SLCFelsBkZleZX7mGn7MMgWqya/vKq/JT1hxvTlK0vLc0Cd21q9mxl8PRq0qvZA5isVbuLLI3AwUJMLxsLXexU/AfdWg+KBY4DMf/hCZCLF0httqaCmSdJJxikW1ee216C5kFuUxjD1NROZViEzvk6uGuHeIgD3PWMUnEoHKYA4DJT+RvscVUkoetFz0V91w7Hb/WgknrS1BlZDMveT873RObhlC2XVRDbNkkCA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>m1K+Tyy0HVPLPV0jHraDo5/A5UrgV7PC+C3WipFfzBLODN0Ct0Z49Gub3ufLICGP1D4OJZRyOnhjZi61X+Hbl/2IjqiIl1VMHR4+qWlJLRNj+X7DparTv3/CBzkhMGY2lZdvp96rpRL2heloKGkmmxqet6/sU3hvw8wxMIf29zYrMEBZSEaAUajNDIDd40qeLXRV7OanRHrVE770wiR9DP0zzeYjX5rN1CltAtUyWmonz7DJAYuUr+UMi3offSITg4byWkvThGNXGmtJeDpU6Y/hhcblP5Yl5175yMvHofLyGw0iW7kv/Izp2yjEVRe26PTXes/9nNOP7ul2KoKMoQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIE2zCCA8OgAwIBAgITMwAAAbHd7bpU6WW4XwABAAABsTANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xODA3MTIyMDExMTlaFw0xOTA3MjYyMDExMTlaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xHjAcBgNVBAMTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJtSvk8stB1Tyz1dIx62g6OfwOVK4Fezwvgt1oqRX8wSzgzdArdGePRrm97nyyAhj9Q+DiWUcjp4Y2YutV/h25f9iI6oiJdVTB0ePqlpSS0TY/l+w6Wq079/wgc5ITBmNpWXb6feq6US9oXpaChpJpsanrev7FN4b8PMMTCH9vc2KzBAWUhGgFGozQyA3eNKni10Vezmp0R61RO+9MIkfQz9M83mI1+azdQpbQLVMlpqJ8+wyQGLlK/lDIt6H30iE4OG8lpL04RjVxprSXg6VOmP4YXG5T+WJede+cjLx6Hy8hsNIlu5L/yM6dsoxFUXtuj013rP/ZzTj+7pdiqCjKECAwEAAaOCAV8wggFbMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBREE7QCnXc+kFVx9eQcf6wXFM8+czBQBgNVHREESTBHpEUwQzEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xFjAUBgNVBAUTDTIyOTgwMys0Mzc5NTAwHwYDVR0jBBgwFoAUyxHoytK0FlgByTcuMxYWuUyaCh8wVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljQ29kU2lnUENBXzA4LTMxLTIwMTAuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNDb2RTaWdQQ0FfMDgtMzEtMjAxMC5jcnQwDQYJKoZIhvcNAQEFBQADggEBAIOp8qYzxaF7HNJegK7spKbD6ShdVyUjjd0lCWlw6E1pFi+UuwXZm4DsWdBoZBuDNKjcz2ONnWt2APV7r0J0B8X8kcDirEUzll2x/fqORrJJ4kMGGZiFcXjTnunblRZBMTRwLEOWogJ3qS89YUpjWfGXfdFSlWCFqLwbRQc/2cGP91D1uX4IieRCxFiOQcCVOEkf1x34ME8pLztHWZI37pch7RdmkBwvLW1r/wt15aoS3fqvxBG04CEyWr8FzkX5P41Wrs5R1syufQQZMBLyv59IJpwOAA0oraXeRC3M1If/lEmVVwxNNJwjCt3DjTIJ9L01KMXe0Ig/qRIToTBwoBE=</X509Certificate><X509Certificate>MIIFvDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMxMjIxOTMyWhcNMjAwODMxMjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJyWVwZMGS/HZpgICBCmXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1VwqJyq4gSfTwaKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJcap6Vyc1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ+NKNYv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dPY+fSLWLxRT3nrAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlfA9MCAwEAAaOCAV4wggFaMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrStBZYAck3LjMWFrlMmgofMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGYYDuoMW+mPLzYLTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJgQFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+fyZGr+tvQLEytWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6oqhWnONwu7i0+Hm1SXL3PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW4LiKS1fylUKc8fPv7uOGHzQ8uFaa8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5Y1ZEolHN+emjWFbdmwJFRC9f9Nqu1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU8XofSrvR4Vbo0HiWGFzJNRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18KUicctHzbMrB7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUeDordEN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7ts3Z52Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jshrg1cnPCiroZogwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6IybgY+g5yjcGjPa8CQGr/aZuW4hCoELQ3UAjWwz0=</X509Certificate><X509Certificate>MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcNMjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWEzbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/kXG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjnrOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTNAz93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAHMuouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yqhv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXxBLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/kbQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3su77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcrSwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZEjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21adlaBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIE2jCCA8KgAwIBAgITMwAAAQii+Uk6wLzpWAAAAAABCDANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTgwODIzMjAyMDI3WhcNMTkxMTIzMjAyMDI3WjCByjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046QTg0MS00QkI0LUNBOTMxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIHNlcnZpY2UwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC7nYVW8D1vF9H+Np9rsDfXj5qO3efQTdBKUy8kK5zu2QbTqQrAtPz32S1pGznILaw9Vroc0RL+bHD+A+3G1+hk35brsgTa1HR/NeHWJc8FXBLzVkeNz0oZvHJ9WKMLsQlRa298hhG342GRgw222kwOXKFo0GimWuTkiJp24p98iEvgIYQavN3qSM6giFZONzqwyEJARo9Eu9KHppS2sC7AR8asAZfkBqpdwbw1DnrPcr01IimEEVHBqdZPsLhbg0rkIDCy0XajW0HsaisIJgpS3LePUlVnmiio0mEH0s4ASJ/5B/sca7/hSOcTclznzJXwSgMgM7/xxKWzZImdQDiZAgMBAAGjggEJMIIBBTAdBgNVHQ4EFgQUryk+Y1deSQhnMh4mC/394aUdl2QwHwYDVR0jBBgwFoAUIzT42VJGcArtQPt2+7MrsMM1sw8wVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljcm9zb2Z0VGltZVN0YW1wUENBLmNybDBYBggrBgEFBQcBAQRMMEowSAYIKwYBBQUHMAKGPGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljcm9zb2Z0VGltZVN0YW1wUENBLmNydDATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAQEAMNTUvMQ68dXnRkqOLqksPUC9I2MhjMGl4bF2s8xtG/aCP1iW9RdXOe/dWHhbzMTKlBUhxRJsxPv4EbgpfH+4Oy3VFiHi3V5HvZlbSAqvd+mmYjpCh4nfwFV4YMfTk09eiHkkriORgYYwacpj7rqcV6fuSLchQ+qjvPkQXm090rmnmC3zQaKtRP3p4hd52xCXMUuoYRqeyeS34+3+WHWLYKxHo81yTFi/SZc3+sUNOmrWbVzHK3osyTsNS0XF3BHNni19Wt0KlkdnCMFeQs99GPcYH3nXKjNaTPQ/c8eVJbJE0brjYTGu78wKUBkpGs40Kbx+VuJ2Eb8VTPaUaCc3Cg==</X509Certificate><X509Certificate>MIIGBzCCA++gAwIBAgIKYRZoNAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQrc7dGE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd6udOo6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDlKEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd++NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSnEUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68eeEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXDwiALAgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzALBgNVHQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1UdIwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6RhMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIQea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeKw1wDRDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxtYrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ7DsB7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mRKiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVRDupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+FChPfwgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1wlGysOUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89Ds+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BNZ8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RIzCzU2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LBJ1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HIjCPJZr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCleKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbrHk/Jmu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6L54/LlUWa8kTo/0=</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">MIIRCwYJKoZIhvcNAQcCoIIQ/DCCEPgCAQMxCzAJBgUrDgMCGgUAMIIBEwYJKoZIhvcNAQcBoIIBBASCAQAovME/kB5cGktaxQDTXbwNcVOMzPBiqUFIOeiYg0Syo2vm+uZzYvH7Q4YVTxQsaPYKwrXazEdArgxoT70SXnJZmzK5SecUC5tcLB3N0hk17aik3VIsIV6WwGRmV5lfuYafswyBarJr+8qr8lPWHG9OUrS8tzQJ3bWr2bGXw9GrSq9kDmKxVu4ssjcDBQkwvGwtd7FT8B91aD4oFjgMx/+EJkIsXSG22poKZJ0knGKRbV57bXoLmQW5TGMPU1E5lWITO+Tq4a4d4iAPc9YxScSgcpgDgMlP5G+xxVSSh60XPRX3XDsdv9aCSetLUGVkMy95PzvdE5uGULZdVENs2SQIoIINtDCCBNowggPCoAMCAQICEzMAAAEIovlJOsC86VgAAAAAAQgwDQYJKoZIhvcNAQEFBQAwdzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTE4MDgyMzIwMjAyN1oXDTE5MTEyMzIwMjAyN1owgcoxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkE4NDEtNEJCNC1DQTkzMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBzZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu52FVvA9bxfR/jafa7A314+ajt3n0E3QSlMvJCuc7tkG06kKwLT899ktaRs5yC2sPVa6HNES/mxw/gPtxtfoZN+W67IE2tR0fzXh1iXPBVwS81ZHjc9KGbxyfVijC7EJUWtvfIYRt+NhkYMNttpMDlyhaNBoplrk5IiaduKffIhL4CGEGrzd6kjOoIhWTjc6sMhCQEaPRLvSh6aUtrAuwEfGrAGX5AaqXcG8NQ56z3K9NSIphBFRwanWT7C4W4NK5CAwstF2o1tB7GorCCYKUty3j1JVZ5ooqNJhB9LOAEif+Qf7HGu/4UjnE3Jc58yV8EoDIDO/8cSls2SJnUA4mQIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFK8pPmNXXkkIZzIeJgv9/eGlHZdkMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBADDU1LzEOvHV50ZKji6pLD1AvSNjIYzBpeGxdrPMbRv2gj9YlvUXVznv3Vh4W8zEypQVIcUSbMT7+BG4KXx/uDst1RYh4t1eR72ZW0gKr3fppmI6QoeJ38BVeGDH05NPXoh5JK4jkYGGMGnKY+66nFen7ki3IUPqo7z5EF5tPdK5p5gt80GirUT96eIXedsQlzFLqGEansnkt+Pt/lh1i2CsR6PNckxYv0mXN/rFDTpq1m1cxyt6LMk7DUtFxdwRzZ4tfVrdCpZHZwjBXkLPfRj3GB951yozWkz0P3PHlSWyRNG642Exru/MClAZKRrONCm8flbidhG/FUz2lGgnNwowggYHMIID76ADAgECAgphFmg0AAAAAAAcMA0GCSqGSIb3DQEBBQUAMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eTAeFw0wNzA0MDMxMjUzMDlaFw0yMTA0MDMxMzAzMDlaMHcxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xITAfBgNVBAMTGE1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJ+hbLHf20iSKnxrLhnhveLjxZlRI1Ctzt0YTiQP7tGn0UytdDAgEesH1VSVFUmUG0KSrphcMCbaAGvoe73siQcP9w4EmPCJzB/LMySHnfL0Zxws/HvniB3q506jocEjU8qN+kXPCdBer9CwQgSi+aZsk2fXKNxGU7CG0OUoRi4nrIZPVVIM5AMs+2qQkDBuh/NZMJ36ftaXs+ghl3740hPzCLdTbVK0RZCfSABKR2YRJylmqJfk0waBSqL5hKcRRxQJgp+E7VV4/gGaHVAIhQAQMEbtt94jRrvELVSfrx54QTF3zJvfO4OToWECtR0Nsfz3m7IBziJLVP/5BcPCIAsCAwEAAaOCAaswggGnMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFCM0+NlSRnAK7UD7dvuzK7DDNbMPMAsGA1UdDwQEAwIBhjAQBgkrBgEEAYI3FQEEAwIBADCBmAYDVR0jBIGQMIGNgBQOrIJgQFYnl+UlE/wq4QpTlVnkpKFjpGEwXzETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW1pY3Jvc29mdDEtMCsGA1UEAxMkTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5ghB5rRahSqClrUxzWPQHEy5lMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL21pY3Jvc29mdHJvb3RjZXJ0LmNybDBUBggrBgEFBQcBAQRIMEYwRAYIKwYBBQUHMAKGOGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljcm9zb2Z0Um9vdENlcnQuY3J0MBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBBQUAA4ICAQAQl4rDXANENt3ptK132855UU0BsS50cVttDBOrzr57j7gu1BKijG1iuFcCy04gE1CZ3XpA4le7r1iaHOEdAYasu3jyi9DsOwHu4r6PCgXIjUji8FMV3U+rkuTnjWrVgMHmlPIGL4UD6ZEqJCJw+/b85HiZLg33B+JwvBhOnY5rCnKVuKE5nGctxVEO6mJcPxaYiyA/4gcaMvnMMUp2MT0rcgvI6nA9/4UKE9/CCmGO8Ne4F+tOi3/FNSteo7/rvH0LQnvUU3Ih7jDKu3hlXFsBFwoUDtLaFJj1PLlmWLMtL+f5hYbMUVbonXCUbKw5TNT2eb+qGHpiKe+imyk0BncaYsk9Hm0fgvALxyy7z0Oz5fnsfbXjpKh0NbhOxXEjEiZ2CzxSjHFaRkMUvLOzsE1nyJ9C/4B5IYCeFTBm6EISXhrIniIh0EPpK+m79EjMLNTYMoBMJipIJF9a6lbvpt6Znco6b72BJ3QGEe52Ib+bgsEnVLaxaj2JoXZhtG6hE6a/qkfwEm/9ijJssv7fUciMI8lmvZ0dhxJkAj0tr1mPuOQh5bWwymO0eFQF1EEuUKyUsKV4q7OglnUa2ZKHE3UiLzKoCG6gW4wlv6DvhMoh1useT8ma7kng9wFlb4kLfchpyOZu6qeXzjEp/w7FW1zYTRuh2Povnj8uVRZryROj/aGCAscwggIwAgEBMIH4oYHQpIHNMIHKMQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpBODQxLTRCQjQtQ0E5MzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgc2VydmljZaIjCgEBMAcGBSsOAwIaAxUAnr8Syek/rp63e9aVB0RdpYafRgegfTB7pHkwdzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBMA0GCSqGSIb3DQEBBQUAAgUA31i7SjAiGA8yMDE4MDkyODIyMzgwMloYDzIwMTgwOTI5MjIzODAyWjB3MD0GCisGAQQBhFkKBAExLzAtMAoCBQDfWLtKAgEAMAoCAQACAh1NAgH/MAcCAQACAhEoMAoCBQDfWgzKAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEAe1ckPiHXXDwgf2n8ZvvhR2NvShNzSrN3IpuU4FOIYtJeFRX4RVN6k4SYT+sVJLQ94dwnxg9XPiDL1/Hb8ein6aRQBzquzgEo8egqmSpxGsLFFAcT8GKG20wfyvgv7APxpRhotm1eDaUTejZPCw59in5BR5+A9Shg/bPvA3yBWI0xggIVMIICEQIBATCBjjB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0ECEzMAAAEIovlJOsC86VgAAAAAAQgwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE4MDkyOTAwMjAzNFowIwYJKoZIhvcNAQkEMRYEFJ9t89F7XjNS3NueKb9MHbJruEGQMA0GCSqGSIb3DQEBBQUABIIBAHRfFF+I58tLwNJB1OZ9VHHJ+TpwBMGHWogxkwuNkjiEwdHzDsNj7PXI/6GrR+qycJ5v9Zmg8VwsNHhiWsR2Gue4lMeQ/QsPGSGsrXTFVqE8hq3Nm7tbQzeQRjMBAAVQ6Nm3xTjZSwy5uHNPcG1WMS/n51leDKXjBQmCpdsGtjhjT7fje6pMhBqIauFGPhSyug+Bnqye0+Tns3shhfyxYnMKasH8ClZX5ZLi7VI7uVwgAOlamTT67MF04iQ1+qQYx8fJoTG2KUHzjHVtrCF+UiOx8VlBbcqEJ1GUBAs1Dp8MpqUc9mYo9vUsI1Dv1dq8dguXHzC18NyTIcFjKzDnoxU=</CounterSignature></Object></Signature></doc>
